package com.caverock.androidsvg;

import android.graphics.Matrix;
import com.caverock.androidsvg.CSSParser;
import com.caverock.androidsvg.PreserveAspectRatio;
import com.caverock.androidsvg.SVG;
import com.github.mikephil.charting.utils.Utils;
import com.google.mlkit.common.MlKitException;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.zip.GZIPInputStream;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParserFactory;
import okhttp3.internal.http2.Http2Stream;
import okhttp3.internal.p023ws.RealWebSocket;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xmlpull.v1.XmlPullParser;

public class SVGParser {

    /* renamed from: a */
    public SVG f9278a = null;

    /* renamed from: b */
    public SVG.C1844h0 f9279b = null;

    /* renamed from: c */
    public boolean f9280c = false;

    /* renamed from: d */
    public int f9281d;

    /* renamed from: e */
    public boolean f9282e = false;

    /* renamed from: f */
    public SVGElem f9283f = null;

    /* renamed from: g */
    public StringBuilder f9284g = null;

    /* renamed from: h */
    public boolean f9285h = false;

    /* renamed from: i */
    public StringBuilder f9286i = null;

    public enum SVGAttr {
        CLASS,
        clip,
        clip_path,
        clipPathUnits,
        clip_rule,
        color,
        cx,
        cy,
        direction,
        dx,
        dy,
        fx,
        fy,
        d,
        display,
        fill,
        fill_rule,
        fill_opacity,
        font,
        font_family,
        font_size,
        font_weight,
        font_style,
        gradientTransform,
        gradientUnits,
        height,
        href,
        image_rendering,
        marker,
        marker_start,
        marker_mid,
        marker_end,
        markerHeight,
        markerUnits,
        markerWidth,
        mask,
        maskContentUnits,
        maskUnits,
        media,
        offset,
        opacity,
        orient,
        overflow,
        pathLength,
        patternContentUnits,
        patternTransform,
        patternUnits,
        points,
        preserveAspectRatio,
        r,
        refX,
        refY,
        requiredFeatures,
        requiredExtensions,
        requiredFormats,
        requiredFonts,
        rx,
        ry,
        solid_color,
        solid_opacity,
        spreadMethod,
        startOffset,
        stop_color,
        stop_opacity,
        stroke,
        stroke_dasharray,
        stroke_dashoffset,
        stroke_linecap,
        stroke_linejoin,
        stroke_miterlimit,
        stroke_opacity,
        stroke_width,
        style,
        systemLanguage,
        text_anchor,
        text_decoration,
        transform,
        type,
        vector_effect,
        version,
        viewBox,
        width,
        x,
        y,
        x1,
        y1,
        x2,
        y2,
        viewport_fill,
        viewport_fill_opacity,
        visibility,
        UNSUPPORTED;
        

        /* renamed from: a */
        public static final Map<String, SVGAttr> f9287a = null;

        /* access modifiers changed from: public */
        static {
            f9287a = new HashMap();
            for (SVGAttr sVGAttr : values()) {
                if (sVGAttr == CLASS) {
                    f9287a.put("class", sVGAttr);
                } else if (sVGAttr != UNSUPPORTED) {
                    f9287a.put(sVGAttr.name().replace('_', '-'), sVGAttr);
                }
            }
        }

        public static SVGAttr fromString(String str) {
            SVGAttr sVGAttr = f9287a.get(str);
            if (sVGAttr != null) {
                return sVGAttr;
            }
            return UNSUPPORTED;
        }
    }

    public enum SVGElem {
        svg,
        a,
        circle,
        clipPath,
        defs,
        desc,
        ellipse,
        g,
        image,
        line,
        linearGradient,
        marker,
        mask,
        path,
        pattern,
        polygon,
        polyline,
        radialGradient,
        rect,
        solidColor,
        stop,
        style,
        SWITCH,
        symbol,
        text,
        textPath,
        title,
        tref,
        tspan,
        use,
        view,
        UNSUPPORTED;
        

        /* renamed from: d */
        public static final Map<String, SVGElem> f9306d = null;

        /* access modifiers changed from: public */
        static {
            f9306d = new HashMap();
            for (SVGElem sVGElem : values()) {
                if (sVGElem == SWITCH) {
                    f9306d.put("switch", sVGElem);
                } else if (sVGElem != UNSUPPORTED) {
                    f9306d.put(sVGElem.name(), sVGElem);
                }
            }
        }

        public static SVGElem fromString(String str) {
            SVGElem sVGElem = f9306d.get(str);
            if (sVGElem != null) {
                return sVGElem;
            }
            return UNSUPPORTED;
        }
    }

    /* renamed from: com.caverock.androidsvg.SVGParser$a */
    public static /* synthetic */ class C1884a {

        /* renamed from: a */
        public static final /* synthetic */ int[] f9309a;

        /* renamed from: b */
        public static final /* synthetic */ int[] f9310b;

        /* JADX WARNING: Can't wrap try/catch for region: R(240:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|(2:57|58)|59|(2:61|62)|63|(2:65|66)|67|(2:69|70)|71|(2:73|74)|75|(2:77|78)|79|(2:81|82)|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(241:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|(2:57|58)|59|(2:61|62)|63|(2:65|66)|67|(2:69|70)|71|(2:73|74)|75|(2:77|78)|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(242:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|(2:57|58)|59|(2:61|62)|63|(2:65|66)|67|(2:69|70)|71|(2:73|74)|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(243:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|(2:57|58)|59|(2:61|62)|63|(2:65|66)|67|(2:69|70)|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(244:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|(2:57|58)|59|(2:61|62)|63|(2:65|66)|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(245:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|(2:57|58)|59|(2:61|62)|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(246:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|(2:57|58)|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(247:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|(2:53|54)|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(248:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|(2:49|50)|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(249:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|(2:45|46)|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(250:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|(2:41|42)|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(251:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|(3:283|284|286)) */
        /* JADX WARNING: Can't wrap try/catch for region: R(253:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|(2:37|38)|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(254:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|(2:33|34)|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(255:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|(2:29|30)|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(256:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|(2:25|26)|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(257:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|(2:21|22)|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(258:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|(2:17|18)|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(259:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|(2:13|14)|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(260:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|13|14|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|(2:219|220)|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(261:0|(2:1|2)|3|(2:5|6)|7|(2:9|10)|11|13|14|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|219|220|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(262:0|(2:1|2)|3|(2:5|6)|7|9|10|11|13|14|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|219|220|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(263:0|(2:1|2)|3|5|6|7|9|10|11|13|14|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|219|220|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Can't wrap try/catch for region: R(264:0|1|2|3|5|6|7|9|10|11|13|14|15|17|18|19|21|22|23|25|26|27|29|30|31|33|34|35|37|38|39|41|42|43|45|46|47|49|50|51|53|54|55|57|58|59|61|62|63|65|66|67|69|70|71|73|74|75|77|78|79|81|82|83|85|86|87|88|89|90|91|92|93|94|95|96|97|98|99|100|101|102|103|104|105|106|107|108|109|110|111|112|113|114|115|116|117|118|119|120|121|122|123|124|125|126|127|128|129|130|131|132|133|134|135|136|137|138|139|140|141|142|143|144|145|146|147|148|149|150|151|152|153|154|155|156|157|158|159|160|161|162|163|164|165|166|167|168|169|170|171|172|173|174|175|176|177|178|179|180|181|182|183|184|185|186|187|188|189|190|191|192|193|194|195|196|197|198|199|200|201|202|203|204|205|206|207|208|209|210|211|212|213|214|215|216|217|218|219|220|221|223|224|225|226|227|228|229|230|231|232|233|234|235|236|237|238|239|240|241|242|243|244|245|246|247|248|249|250|251|252|253|254|255|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|286) */
        /* JADX WARNING: Failed to process nested try/catch */
        /* JADX WARNING: Missing exception handler attribute for start block: B:101:0x015c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:103:0x0168 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:105:0x0174 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:107:0x0180 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:109:0x018c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:111:0x0198 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:113:0x01a4 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:115:0x01b0 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:117:0x01bc */
        /* JADX WARNING: Missing exception handler attribute for start block: B:119:0x01c8 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:121:0x01d4 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:123:0x01e0 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:125:0x01ec */
        /* JADX WARNING: Missing exception handler attribute for start block: B:127:0x01f8 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:129:0x0204 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:131:0x0210 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:133:0x021c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:135:0x0228 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:137:0x0234 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:139:0x0240 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:141:0x024c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:143:0x0258 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:145:0x0264 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:147:0x0270 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:149:0x027c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:151:0x0288 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:153:0x0294 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:155:0x02a0 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:157:0x02ac */
        /* JADX WARNING: Missing exception handler attribute for start block: B:159:0x02b8 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:161:0x02c4 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:163:0x02d0 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:165:0x02dc */
        /* JADX WARNING: Missing exception handler attribute for start block: B:167:0x02e8 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:169:0x02f4 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:171:0x0300 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:173:0x030c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:175:0x0318 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:177:0x0324 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:179:0x0330 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:181:0x033c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:183:0x0348 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:185:0x0354 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:187:0x0360 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:189:0x036c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:191:0x0378 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:193:0x0384 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:195:0x0390 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:197:0x039c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:199:0x03a8 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:201:0x03b4 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:203:0x03c0 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:205:0x03cc */
        /* JADX WARNING: Missing exception handler attribute for start block: B:207:0x03d8 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:209:0x03e4 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:211:0x03f0 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:213:0x03fc */
        /* JADX WARNING: Missing exception handler attribute for start block: B:215:0x0408 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:217:0x0414 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:219:0x0420 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:225:0x043d */
        /* JADX WARNING: Missing exception handler attribute for start block: B:227:0x0447 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:229:0x0451 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:231:0x045b */
        /* JADX WARNING: Missing exception handler attribute for start block: B:233:0x0465 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:235:0x046f */
        /* JADX WARNING: Missing exception handler attribute for start block: B:237:0x0479 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:239:0x0483 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:241:0x048d */
        /* JADX WARNING: Missing exception handler attribute for start block: B:243:0x0497 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:245:0x04a1 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:247:0x04ab */
        /* JADX WARNING: Missing exception handler attribute for start block: B:249:0x04b5 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:251:0x04bf */
        /* JADX WARNING: Missing exception handler attribute for start block: B:253:0x04c9 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:255:0x04d5 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:257:0x04df */
        /* JADX WARNING: Missing exception handler attribute for start block: B:259:0x04e9 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:261:0x04f3 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:263:0x04fd */
        /* JADX WARNING: Missing exception handler attribute for start block: B:265:0x0507 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:267:0x0511 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:269:0x051d */
        /* JADX WARNING: Missing exception handler attribute for start block: B:271:0x0529 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:273:0x0535 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:275:0x0541 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:277:0x054d */
        /* JADX WARNING: Missing exception handler attribute for start block: B:279:0x0559 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:281:0x0565 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:283:0x0571 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:87:0x0108 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:89:0x0114 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:91:0x0120 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:93:0x012c */
        /* JADX WARNING: Missing exception handler attribute for start block: B:95:0x0138 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:97:0x0144 */
        /* JADX WARNING: Missing exception handler attribute for start block: B:99:0x0150 */
        static {
            /*
                com.caverock.androidsvg.SVGParser$SVGAttr[] r0 = com.caverock.androidsvg.SVGParser.SVGAttr.values()
                int r0 = r0.length
                int[] r0 = new int[r0]
                f9310b = r0
                r1 = 1
                com.caverock.androidsvg.SVGParser$SVGAttr r2 = com.caverock.androidsvg.SVGParser.SVGAttr.x     // Catch:{ NoSuchFieldError -> 0x0012 }
                int r2 = r2.ordinal()     // Catch:{ NoSuchFieldError -> 0x0012 }
                r0[r2] = r1     // Catch:{ NoSuchFieldError -> 0x0012 }
            L_0x0012:
                r0 = 2
                int[] r2 = f9310b     // Catch:{ NoSuchFieldError -> 0x001d }
                com.caverock.androidsvg.SVGParser$SVGAttr r3 = com.caverock.androidsvg.SVGParser.SVGAttr.y     // Catch:{ NoSuchFieldError -> 0x001d }
                int r3 = r3.ordinal()     // Catch:{ NoSuchFieldError -> 0x001d }
                r2[r3] = r0     // Catch:{ NoSuchFieldError -> 0x001d }
            L_0x001d:
                r2 = 3
                int[] r3 = f9310b     // Catch:{ NoSuchFieldError -> 0x0028 }
                com.caverock.androidsvg.SVGParser$SVGAttr r4 = com.caverock.androidsvg.SVGParser.SVGAttr.width     // Catch:{ NoSuchFieldError -> 0x0028 }
                int r4 = r4.ordinal()     // Catch:{ NoSuchFieldError -> 0x0028 }
                r3[r4] = r2     // Catch:{ NoSuchFieldError -> 0x0028 }
            L_0x0028:
                r3 = 4
                int[] r4 = f9310b     // Catch:{ NoSuchFieldError -> 0x0033 }
                com.caverock.androidsvg.SVGParser$SVGAttr r5 = com.caverock.androidsvg.SVGParser.SVGAttr.height     // Catch:{ NoSuchFieldError -> 0x0033 }
                int r5 = r5.ordinal()     // Catch:{ NoSuchFieldError -> 0x0033 }
                r4[r5] = r3     // Catch:{ NoSuchFieldError -> 0x0033 }
            L_0x0033:
                r4 = 5
                int[] r5 = f9310b     // Catch:{ NoSuchFieldError -> 0x003e }
                com.caverock.androidsvg.SVGParser$SVGAttr r6 = com.caverock.androidsvg.SVGParser.SVGAttr.version     // Catch:{ NoSuchFieldError -> 0x003e }
                int r6 = r6.ordinal()     // Catch:{ NoSuchFieldError -> 0x003e }
                r5[r6] = r4     // Catch:{ NoSuchFieldError -> 0x003e }
            L_0x003e:
                r5 = 6
                int[] r6 = f9310b     // Catch:{ NoSuchFieldError -> 0x0049 }
                com.caverock.androidsvg.SVGParser$SVGAttr r7 = com.caverock.androidsvg.SVGParser.SVGAttr.href     // Catch:{ NoSuchFieldError -> 0x0049 }
                int r7 = r7.ordinal()     // Catch:{ NoSuchFieldError -> 0x0049 }
                r6[r7] = r5     // Catch:{ NoSuchFieldError -> 0x0049 }
            L_0x0049:
                r6 = 7
                int[] r7 = f9310b     // Catch:{ NoSuchFieldError -> 0x0054 }
                com.caverock.androidsvg.SVGParser$SVGAttr r8 = com.caverock.androidsvg.SVGParser.SVGAttr.preserveAspectRatio     // Catch:{ NoSuchFieldError -> 0x0054 }
                int r8 = r8.ordinal()     // Catch:{ NoSuchFieldError -> 0x0054 }
                r7[r8] = r6     // Catch:{ NoSuchFieldError -> 0x0054 }
            L_0x0054:
                r7 = 8
                int[] r8 = f9310b     // Catch:{ NoSuchFieldError -> 0x0060 }
                com.caverock.androidsvg.SVGParser$SVGAttr r9 = com.caverock.androidsvg.SVGParser.SVGAttr.d     // Catch:{ NoSuchFieldError -> 0x0060 }
                int r9 = r9.ordinal()     // Catch:{ NoSuchFieldError -> 0x0060 }
                r8[r9] = r7     // Catch:{ NoSuchFieldError -> 0x0060 }
            L_0x0060:
                r8 = 9
                int[] r9 = f9310b     // Catch:{ NoSuchFieldError -> 0x006c }
                com.caverock.androidsvg.SVGParser$SVGAttr r10 = com.caverock.androidsvg.SVGParser.SVGAttr.pathLength     // Catch:{ NoSuchFieldError -> 0x006c }
                int r10 = r10.ordinal()     // Catch:{ NoSuchFieldError -> 0x006c }
                r9[r10] = r8     // Catch:{ NoSuchFieldError -> 0x006c }
            L_0x006c:
                r9 = 10
                int[] r10 = f9310b     // Catch:{ NoSuchFieldError -> 0x0078 }
                com.caverock.androidsvg.SVGParser$SVGAttr r11 = com.caverock.androidsvg.SVGParser.SVGAttr.rx     // Catch:{ NoSuchFieldError -> 0x0078 }
                int r11 = r11.ordinal()     // Catch:{ NoSuchFieldError -> 0x0078 }
                r10[r11] = r9     // Catch:{ NoSuchFieldError -> 0x0078 }
            L_0x0078:
                r10 = 11
                int[] r11 = f9310b     // Catch:{ NoSuchFieldError -> 0x0084 }
                com.caverock.androidsvg.SVGParser$SVGAttr r12 = com.caverock.androidsvg.SVGParser.SVGAttr.ry     // Catch:{ NoSuchFieldError -> 0x0084 }
                int r12 = r12.ordinal()     // Catch:{ NoSuchFieldError -> 0x0084 }
                r11[r12] = r10     // Catch:{ NoSuchFieldError -> 0x0084 }
            L_0x0084:
                r11 = 12
                int[] r12 = f9310b     // Catch:{ NoSuchFieldError -> 0x0090 }
                com.caverock.androidsvg.SVGParser$SVGAttr r13 = com.caverock.androidsvg.SVGParser.SVGAttr.cx     // Catch:{ NoSuchFieldError -> 0x0090 }
                int r13 = r13.ordinal()     // Catch:{ NoSuchFieldError -> 0x0090 }
                r12[r13] = r11     // Catch:{ NoSuchFieldError -> 0x0090 }
            L_0x0090:
                r12 = 13
                int[] r13 = f9310b     // Catch:{ NoSuchFieldError -> 0x009c }
                com.caverock.androidsvg.SVGParser$SVGAttr r14 = com.caverock.androidsvg.SVGParser.SVGAttr.cy     // Catch:{ NoSuchFieldError -> 0x009c }
                int r14 = r14.ordinal()     // Catch:{ NoSuchFieldError -> 0x009c }
                r13[r14] = r12     // Catch:{ NoSuchFieldError -> 0x009c }
            L_0x009c:
                r13 = 14
                int[] r14 = f9310b     // Catch:{ NoSuchFieldError -> 0x00a8 }
                com.caverock.androidsvg.SVGParser$SVGAttr r15 = com.caverock.androidsvg.SVGParser.SVGAttr.r     // Catch:{ NoSuchFieldError -> 0x00a8 }
                int r15 = r15.ordinal()     // Catch:{ NoSuchFieldError -> 0x00a8 }
                r14[r15] = r13     // Catch:{ NoSuchFieldError -> 0x00a8 }
            L_0x00a8:
                r14 = 15
                int[] r15 = f9310b     // Catch:{ NoSuchFieldError -> 0x00b4 }
                com.caverock.androidsvg.SVGParser$SVGAttr r16 = com.caverock.androidsvg.SVGParser.SVGAttr.x1     // Catch:{ NoSuchFieldError -> 0x00b4 }
                int r16 = r16.ordinal()     // Catch:{ NoSuchFieldError -> 0x00b4 }
                r15[r16] = r14     // Catch:{ NoSuchFieldError -> 0x00b4 }
            L_0x00b4:
                r15 = 16
                int[] r16 = f9310b     // Catch:{ NoSuchFieldError -> 0x00c0 }
                com.caverock.androidsvg.SVGParser$SVGAttr r17 = com.caverock.androidsvg.SVGParser.SVGAttr.y1     // Catch:{ NoSuchFieldError -> 0x00c0 }
                int r17 = r17.ordinal()     // Catch:{ NoSuchFieldError -> 0x00c0 }
                r16[r17] = r15     // Catch:{ NoSuchFieldError -> 0x00c0 }
            L_0x00c0:
                r16 = 17
                int[] r17 = f9310b     // Catch:{ NoSuchFieldError -> 0x00cc }
                com.caverock.androidsvg.SVGParser$SVGAttr r18 = com.caverock.androidsvg.SVGParser.SVGAttr.x2     // Catch:{ NoSuchFieldError -> 0x00cc }
                int r18 = r18.ordinal()     // Catch:{ NoSuchFieldError -> 0x00cc }
                r17[r18] = r16     // Catch:{ NoSuchFieldError -> 0x00cc }
            L_0x00cc:
                r17 = 18
                int[] r18 = f9310b     // Catch:{ NoSuchFieldError -> 0x00d8 }
                com.caverock.androidsvg.SVGParser$SVGAttr r19 = com.caverock.androidsvg.SVGParser.SVGAttr.y2     // Catch:{ NoSuchFieldError -> 0x00d8 }
                int r19 = r19.ordinal()     // Catch:{ NoSuchFieldError -> 0x00d8 }
                r18[r19] = r17     // Catch:{ NoSuchFieldError -> 0x00d8 }
            L_0x00d8:
                r18 = 19
                int[] r19 = f9310b     // Catch:{ NoSuchFieldError -> 0x00e4 }
                com.caverock.androidsvg.SVGParser$SVGAttr r20 = com.caverock.androidsvg.SVGParser.SVGAttr.dx     // Catch:{ NoSuchFieldError -> 0x00e4 }
                int r20 = r20.ordinal()     // Catch:{ NoSuchFieldError -> 0x00e4 }
                r19[r20] = r18     // Catch:{ NoSuchFieldError -> 0x00e4 }
            L_0x00e4:
                r19 = 20
                int[] r20 = f9310b     // Catch:{ NoSuchFieldError -> 0x00f0 }
                com.caverock.androidsvg.SVGParser$SVGAttr r21 = com.caverock.androidsvg.SVGParser.SVGAttr.dy     // Catch:{ NoSuchFieldError -> 0x00f0 }
                int r21 = r21.ordinal()     // Catch:{ NoSuchFieldError -> 0x00f0 }
                r20[r21] = r19     // Catch:{ NoSuchFieldError -> 0x00f0 }
            L_0x00f0:
                r20 = 21
                int[] r21 = f9310b     // Catch:{ NoSuchFieldError -> 0x00fc }
                com.caverock.androidsvg.SVGParser$SVGAttr r22 = com.caverock.androidsvg.SVGParser.SVGAttr.requiredFeatures     // Catch:{ NoSuchFieldError -> 0x00fc }
                int r22 = r22.ordinal()     // Catch:{ NoSuchFieldError -> 0x00fc }
                r21[r22] = r20     // Catch:{ NoSuchFieldError -> 0x00fc }
            L_0x00fc:
                r21 = 22
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0108 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.requiredExtensions     // Catch:{ NoSuchFieldError -> 0x0108 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0108 }
                r22[r23] = r21     // Catch:{ NoSuchFieldError -> 0x0108 }
            L_0x0108:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0114 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.systemLanguage     // Catch:{ NoSuchFieldError -> 0x0114 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0114 }
                r24 = 23
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0114 }
            L_0x0114:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0120 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.requiredFormats     // Catch:{ NoSuchFieldError -> 0x0120 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0120 }
                r24 = 24
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0120 }
            L_0x0120:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x012c }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.requiredFonts     // Catch:{ NoSuchFieldError -> 0x012c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x012c }
                r24 = 25
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x012c }
            L_0x012c:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0138 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.refX     // Catch:{ NoSuchFieldError -> 0x0138 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0138 }
                r24 = 26
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0138 }
            L_0x0138:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0144 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.refY     // Catch:{ NoSuchFieldError -> 0x0144 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0144 }
                r24 = 27
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0144 }
            L_0x0144:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0150 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.markerWidth     // Catch:{ NoSuchFieldError -> 0x0150 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0150 }
                r24 = 28
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0150 }
            L_0x0150:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x015c }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.markerHeight     // Catch:{ NoSuchFieldError -> 0x015c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x015c }
                r24 = 29
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x015c }
            L_0x015c:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0168 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.markerUnits     // Catch:{ NoSuchFieldError -> 0x0168 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0168 }
                r24 = 30
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0168 }
            L_0x0168:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0174 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.orient     // Catch:{ NoSuchFieldError -> 0x0174 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0174 }
                r24 = 31
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0174 }
            L_0x0174:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0180 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.gradientUnits     // Catch:{ NoSuchFieldError -> 0x0180 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0180 }
                r24 = 32
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0180 }
            L_0x0180:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x018c }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.gradientTransform     // Catch:{ NoSuchFieldError -> 0x018c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x018c }
                r24 = 33
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x018c }
            L_0x018c:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0198 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.spreadMethod     // Catch:{ NoSuchFieldError -> 0x0198 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0198 }
                r24 = 34
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0198 }
            L_0x0198:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x01a4 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.fx     // Catch:{ NoSuchFieldError -> 0x01a4 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01a4 }
                r24 = 35
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01a4 }
            L_0x01a4:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x01b0 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.fy     // Catch:{ NoSuchFieldError -> 0x01b0 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01b0 }
                r24 = 36
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01b0 }
            L_0x01b0:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x01bc }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.offset     // Catch:{ NoSuchFieldError -> 0x01bc }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01bc }
                r24 = 37
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01bc }
            L_0x01bc:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x01c8 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.clipPathUnits     // Catch:{ NoSuchFieldError -> 0x01c8 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01c8 }
                r24 = 38
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01c8 }
            L_0x01c8:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x01d4 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.startOffset     // Catch:{ NoSuchFieldError -> 0x01d4 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01d4 }
                r24 = 39
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01d4 }
            L_0x01d4:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x01e0 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.patternUnits     // Catch:{ NoSuchFieldError -> 0x01e0 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01e0 }
                r24 = 40
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01e0 }
            L_0x01e0:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x01ec }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.patternContentUnits     // Catch:{ NoSuchFieldError -> 0x01ec }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01ec }
                r24 = 41
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01ec }
            L_0x01ec:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x01f8 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.patternTransform     // Catch:{ NoSuchFieldError -> 0x01f8 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x01f8 }
                r24 = 42
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x01f8 }
            L_0x01f8:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0204 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.maskUnits     // Catch:{ NoSuchFieldError -> 0x0204 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0204 }
                r24 = 43
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0204 }
            L_0x0204:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0210 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.maskContentUnits     // Catch:{ NoSuchFieldError -> 0x0210 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0210 }
                r24 = 44
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0210 }
            L_0x0210:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x021c }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.style     // Catch:{ NoSuchFieldError -> 0x021c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x021c }
                r24 = 45
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x021c }
            L_0x021c:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0228 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.CLASS     // Catch:{ NoSuchFieldError -> 0x0228 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0228 }
                r24 = 46
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0228 }
            L_0x0228:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0234 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.fill     // Catch:{ NoSuchFieldError -> 0x0234 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0234 }
                r24 = 47
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0234 }
            L_0x0234:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0240 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.fill_rule     // Catch:{ NoSuchFieldError -> 0x0240 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0240 }
                r24 = 48
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0240 }
            L_0x0240:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x024c }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.fill_opacity     // Catch:{ NoSuchFieldError -> 0x024c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x024c }
                r24 = 49
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x024c }
            L_0x024c:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0258 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.stroke     // Catch:{ NoSuchFieldError -> 0x0258 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0258 }
                r24 = 50
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0258 }
            L_0x0258:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0264 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.stroke_opacity     // Catch:{ NoSuchFieldError -> 0x0264 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0264 }
                r24 = 51
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0264 }
            L_0x0264:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0270 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.stroke_width     // Catch:{ NoSuchFieldError -> 0x0270 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0270 }
                r24 = 52
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0270 }
            L_0x0270:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x027c }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.stroke_linecap     // Catch:{ NoSuchFieldError -> 0x027c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x027c }
                r24 = 53
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x027c }
            L_0x027c:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0288 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.stroke_linejoin     // Catch:{ NoSuchFieldError -> 0x0288 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0288 }
                r24 = 54
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0288 }
            L_0x0288:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0294 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.stroke_miterlimit     // Catch:{ NoSuchFieldError -> 0x0294 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0294 }
                r24 = 55
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0294 }
            L_0x0294:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x02a0 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.stroke_dasharray     // Catch:{ NoSuchFieldError -> 0x02a0 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02a0 }
                r24 = 56
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02a0 }
            L_0x02a0:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x02ac }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.stroke_dashoffset     // Catch:{ NoSuchFieldError -> 0x02ac }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02ac }
                r24 = 57
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02ac }
            L_0x02ac:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x02b8 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.opacity     // Catch:{ NoSuchFieldError -> 0x02b8 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02b8 }
                r24 = 58
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02b8 }
            L_0x02b8:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x02c4 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.color     // Catch:{ NoSuchFieldError -> 0x02c4 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02c4 }
                r24 = 59
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02c4 }
            L_0x02c4:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x02d0 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.font     // Catch:{ NoSuchFieldError -> 0x02d0 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02d0 }
                r24 = 60
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02d0 }
            L_0x02d0:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x02dc }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.font_family     // Catch:{ NoSuchFieldError -> 0x02dc }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02dc }
                r24 = 61
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02dc }
            L_0x02dc:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x02e8 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.font_size     // Catch:{ NoSuchFieldError -> 0x02e8 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02e8 }
                r24 = 62
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02e8 }
            L_0x02e8:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x02f4 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.font_weight     // Catch:{ NoSuchFieldError -> 0x02f4 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x02f4 }
                r24 = 63
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x02f4 }
            L_0x02f4:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0300 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.font_style     // Catch:{ NoSuchFieldError -> 0x0300 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0300 }
                r24 = 64
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0300 }
            L_0x0300:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x030c }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.text_decoration     // Catch:{ NoSuchFieldError -> 0x030c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x030c }
                r24 = 65
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x030c }
            L_0x030c:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0318 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.direction     // Catch:{ NoSuchFieldError -> 0x0318 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0318 }
                r24 = 66
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0318 }
            L_0x0318:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0324 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.text_anchor     // Catch:{ NoSuchFieldError -> 0x0324 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0324 }
                r24 = 67
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0324 }
            L_0x0324:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0330 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.overflow     // Catch:{ NoSuchFieldError -> 0x0330 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0330 }
                r24 = 68
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0330 }
            L_0x0330:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x033c }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.marker     // Catch:{ NoSuchFieldError -> 0x033c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x033c }
                r24 = 69
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x033c }
            L_0x033c:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0348 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.marker_start     // Catch:{ NoSuchFieldError -> 0x0348 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0348 }
                r24 = 70
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0348 }
            L_0x0348:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0354 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.marker_mid     // Catch:{ NoSuchFieldError -> 0x0354 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0354 }
                r24 = 71
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0354 }
            L_0x0354:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0360 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.marker_end     // Catch:{ NoSuchFieldError -> 0x0360 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0360 }
                r24 = 72
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0360 }
            L_0x0360:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x036c }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.display     // Catch:{ NoSuchFieldError -> 0x036c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x036c }
                r24 = 73
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x036c }
            L_0x036c:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0378 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.visibility     // Catch:{ NoSuchFieldError -> 0x0378 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0378 }
                r24 = 74
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0378 }
            L_0x0378:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0384 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.stop_color     // Catch:{ NoSuchFieldError -> 0x0384 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0384 }
                r24 = 75
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0384 }
            L_0x0384:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0390 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.stop_opacity     // Catch:{ NoSuchFieldError -> 0x0390 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0390 }
                r24 = 76
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0390 }
            L_0x0390:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x039c }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.clip     // Catch:{ NoSuchFieldError -> 0x039c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x039c }
                r24 = 77
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x039c }
            L_0x039c:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x03a8 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.clip_path     // Catch:{ NoSuchFieldError -> 0x03a8 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03a8 }
                r24 = 78
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03a8 }
            L_0x03a8:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x03b4 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.clip_rule     // Catch:{ NoSuchFieldError -> 0x03b4 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03b4 }
                r24 = 79
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03b4 }
            L_0x03b4:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x03c0 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.mask     // Catch:{ NoSuchFieldError -> 0x03c0 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03c0 }
                r24 = 80
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03c0 }
            L_0x03c0:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x03cc }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.solid_color     // Catch:{ NoSuchFieldError -> 0x03cc }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03cc }
                r24 = 81
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03cc }
            L_0x03cc:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x03d8 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.solid_opacity     // Catch:{ NoSuchFieldError -> 0x03d8 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03d8 }
                r24 = 82
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03d8 }
            L_0x03d8:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x03e4 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.viewport_fill     // Catch:{ NoSuchFieldError -> 0x03e4 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03e4 }
                r24 = 83
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03e4 }
            L_0x03e4:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x03f0 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.viewport_fill_opacity     // Catch:{ NoSuchFieldError -> 0x03f0 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03f0 }
                r24 = 84
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03f0 }
            L_0x03f0:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x03fc }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.vector_effect     // Catch:{ NoSuchFieldError -> 0x03fc }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x03fc }
                r24 = 85
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x03fc }
            L_0x03fc:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0408 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.image_rendering     // Catch:{ NoSuchFieldError -> 0x0408 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0408 }
                r24 = 86
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0408 }
            L_0x0408:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0414 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.viewBox     // Catch:{ NoSuchFieldError -> 0x0414 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0414 }
                r24 = 87
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0414 }
            L_0x0414:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x0420 }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.type     // Catch:{ NoSuchFieldError -> 0x0420 }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x0420 }
                r24 = 88
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x0420 }
            L_0x0420:
                int[] r22 = f9310b     // Catch:{ NoSuchFieldError -> 0x042c }
                com.caverock.androidsvg.SVGParser$SVGAttr r23 = com.caverock.androidsvg.SVGParser.SVGAttr.media     // Catch:{ NoSuchFieldError -> 0x042c }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x042c }
                r24 = 89
                r22[r23] = r24     // Catch:{ NoSuchFieldError -> 0x042c }
            L_0x042c:
                com.caverock.androidsvg.SVGParser$SVGElem[] r15 = com.caverock.androidsvg.SVGParser.SVGElem.values()
                int r15 = r15.length
                int[] r15 = new int[r15]
                f9309a = r15
                com.caverock.androidsvg.SVGParser$SVGElem r23 = com.caverock.androidsvg.SVGParser.SVGElem.svg     // Catch:{ NoSuchFieldError -> 0x043d }
                int r23 = r23.ordinal()     // Catch:{ NoSuchFieldError -> 0x043d }
                r15[r23] = r1     // Catch:{ NoSuchFieldError -> 0x043d }
            L_0x043d:
                int[] r1 = f9309a     // Catch:{ NoSuchFieldError -> 0x0447 }
                com.caverock.androidsvg.SVGParser$SVGElem r15 = com.caverock.androidsvg.SVGParser.SVGElem.g     // Catch:{ NoSuchFieldError -> 0x0447 }
                int r15 = r15.ordinal()     // Catch:{ NoSuchFieldError -> 0x0447 }
                r1[r15] = r0     // Catch:{ NoSuchFieldError -> 0x0447 }
            L_0x0447:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x0451 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.a     // Catch:{ NoSuchFieldError -> 0x0451 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0451 }
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0451 }
            L_0x0451:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x045b }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.defs     // Catch:{ NoSuchFieldError -> 0x045b }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x045b }
                r0[r1] = r3     // Catch:{ NoSuchFieldError -> 0x045b }
            L_0x045b:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x0465 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.use     // Catch:{ NoSuchFieldError -> 0x0465 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0465 }
                r0[r1] = r4     // Catch:{ NoSuchFieldError -> 0x0465 }
            L_0x0465:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x046f }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.path     // Catch:{ NoSuchFieldError -> 0x046f }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x046f }
                r0[r1] = r5     // Catch:{ NoSuchFieldError -> 0x046f }
            L_0x046f:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x0479 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.rect     // Catch:{ NoSuchFieldError -> 0x0479 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0479 }
                r0[r1] = r6     // Catch:{ NoSuchFieldError -> 0x0479 }
            L_0x0479:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x0483 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.circle     // Catch:{ NoSuchFieldError -> 0x0483 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0483 }
                r0[r1] = r7     // Catch:{ NoSuchFieldError -> 0x0483 }
            L_0x0483:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x048d }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.ellipse     // Catch:{ NoSuchFieldError -> 0x048d }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x048d }
                r0[r1] = r8     // Catch:{ NoSuchFieldError -> 0x048d }
            L_0x048d:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x0497 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.line     // Catch:{ NoSuchFieldError -> 0x0497 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0497 }
                r0[r1] = r9     // Catch:{ NoSuchFieldError -> 0x0497 }
            L_0x0497:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x04a1 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.polyline     // Catch:{ NoSuchFieldError -> 0x04a1 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04a1 }
                r0[r1] = r10     // Catch:{ NoSuchFieldError -> 0x04a1 }
            L_0x04a1:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x04ab }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.polygon     // Catch:{ NoSuchFieldError -> 0x04ab }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04ab }
                r0[r1] = r11     // Catch:{ NoSuchFieldError -> 0x04ab }
            L_0x04ab:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x04b5 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.text     // Catch:{ NoSuchFieldError -> 0x04b5 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04b5 }
                r0[r1] = r12     // Catch:{ NoSuchFieldError -> 0x04b5 }
            L_0x04b5:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x04bf }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.tspan     // Catch:{ NoSuchFieldError -> 0x04bf }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04bf }
                r0[r1] = r13     // Catch:{ NoSuchFieldError -> 0x04bf }
            L_0x04bf:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x04c9 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.tref     // Catch:{ NoSuchFieldError -> 0x04c9 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04c9 }
                r0[r1] = r14     // Catch:{ NoSuchFieldError -> 0x04c9 }
            L_0x04c9:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x04d5 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.SWITCH     // Catch:{ NoSuchFieldError -> 0x04d5 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04d5 }
                r2 = 16
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x04d5 }
            L_0x04d5:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x04df }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.symbol     // Catch:{ NoSuchFieldError -> 0x04df }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04df }
                r0[r1] = r16     // Catch:{ NoSuchFieldError -> 0x04df }
            L_0x04df:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x04e9 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.marker     // Catch:{ NoSuchFieldError -> 0x04e9 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04e9 }
                r0[r1] = r17     // Catch:{ NoSuchFieldError -> 0x04e9 }
            L_0x04e9:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x04f3 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.linearGradient     // Catch:{ NoSuchFieldError -> 0x04f3 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04f3 }
                r0[r1] = r18     // Catch:{ NoSuchFieldError -> 0x04f3 }
            L_0x04f3:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x04fd }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.radialGradient     // Catch:{ NoSuchFieldError -> 0x04fd }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x04fd }
                r0[r1] = r19     // Catch:{ NoSuchFieldError -> 0x04fd }
            L_0x04fd:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x0507 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.stop     // Catch:{ NoSuchFieldError -> 0x0507 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0507 }
                r0[r1] = r20     // Catch:{ NoSuchFieldError -> 0x0507 }
            L_0x0507:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x0511 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.title     // Catch:{ NoSuchFieldError -> 0x0511 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0511 }
                r0[r1] = r21     // Catch:{ NoSuchFieldError -> 0x0511 }
            L_0x0511:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x051d }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.desc     // Catch:{ NoSuchFieldError -> 0x051d }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x051d }
                r2 = 23
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x051d }
            L_0x051d:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x0529 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.clipPath     // Catch:{ NoSuchFieldError -> 0x0529 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0529 }
                r2 = 24
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0529 }
            L_0x0529:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x0535 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.textPath     // Catch:{ NoSuchFieldError -> 0x0535 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0535 }
                r2 = 25
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0535 }
            L_0x0535:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x0541 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.pattern     // Catch:{ NoSuchFieldError -> 0x0541 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0541 }
                r2 = 26
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0541 }
            L_0x0541:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x054d }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.image     // Catch:{ NoSuchFieldError -> 0x054d }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x054d }
                r2 = 27
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x054d }
            L_0x054d:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x0559 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.view     // Catch:{ NoSuchFieldError -> 0x0559 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0559 }
                r2 = 28
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0559 }
            L_0x0559:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x0565 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.mask     // Catch:{ NoSuchFieldError -> 0x0565 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0565 }
                r2 = 29
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0565 }
            L_0x0565:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x0571 }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.style     // Catch:{ NoSuchFieldError -> 0x0571 }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x0571 }
                r2 = 30
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x0571 }
            L_0x0571:
                int[] r0 = f9309a     // Catch:{ NoSuchFieldError -> 0x057d }
                com.caverock.androidsvg.SVGParser$SVGElem r1 = com.caverock.androidsvg.SVGParser.SVGElem.solidColor     // Catch:{ NoSuchFieldError -> 0x057d }
                int r1 = r1.ordinal()     // Catch:{ NoSuchFieldError -> 0x057d }
                r2 = 31
                r0[r1] = r2     // Catch:{ NoSuchFieldError -> 0x057d }
            L_0x057d:
                return
            */
            throw new UnsupportedOperationException("Method not decompiled: com.caverock.androidsvg.SVGParser.C1884a.<clinit>():void");
        }
    }

    /* renamed from: com.caverock.androidsvg.SVGParser$b */
    public static class C1885b {

        /* renamed from: a */
        public static final Map<String, PreserveAspectRatio.Alignment> f9311a;

        static {
            HashMap hashMap = new HashMap(10);
            f9311a = hashMap;
            hashMap.put("none", PreserveAspectRatio.Alignment.none);
            hashMap.put("xMinYMin", PreserveAspectRatio.Alignment.xMinYMin);
            hashMap.put("xMidYMin", PreserveAspectRatio.Alignment.xMidYMin);
            hashMap.put("xMaxYMin", PreserveAspectRatio.Alignment.xMaxYMin);
            hashMap.put("xMinYMid", PreserveAspectRatio.Alignment.xMinYMid);
            hashMap.put("xMidYMid", PreserveAspectRatio.Alignment.xMidYMid);
            hashMap.put("xMaxYMid", PreserveAspectRatio.Alignment.xMaxYMid);
            hashMap.put("xMinYMax", PreserveAspectRatio.Alignment.xMinYMax);
            hashMap.put("xMidYMax", PreserveAspectRatio.Alignment.xMidYMax);
            hashMap.put("xMaxYMax", PreserveAspectRatio.Alignment.xMaxYMax);
        }

        /* renamed from: a */
        public static PreserveAspectRatio.Alignment m12984a(String str) {
            return f9311a.get(str);
        }
    }

    /* renamed from: com.caverock.androidsvg.SVGParser$c */
    public static class C1886c {

        /* renamed from: a */
        public static final Map<String, Integer> f9312a;

        static {
            HashMap hashMap = new HashMap(47);
            f9312a = hashMap;
            hashMap.put("aliceblue", -984833);
            hashMap.put("antiquewhite", -332841);
            hashMap.put("aqua", -16711681);
            hashMap.put("aquamarine", -8388652);
            hashMap.put("azure", -983041);
            hashMap.put("beige", -657956);
            hashMap.put("bisque", -6972);
            hashMap.put("black", -16777216);
            hashMap.put("blanchedalmond", -5171);
            hashMap.put("blue", -16776961);
            hashMap.put("blueviolet", -7722014);
            hashMap.put("brown", -5952982);
            hashMap.put("burlywood", -2180985);
            hashMap.put("cadetblue", -10510688);
            hashMap.put("chartreuse", -8388864);
            hashMap.put("chocolate", -2987746);
            hashMap.put("coral", -32944);
            hashMap.put("cornflowerblue", -10185235);
            hashMap.put("cornsilk", -1828);
            hashMap.put("crimson", -2354116);
            hashMap.put("cyan", -16711681);
            hashMap.put("darkblue", -16777077);
            hashMap.put("darkcyan", -16741493);
            hashMap.put("darkgoldenrod", -4684277);
            hashMap.put("darkgray", -5658199);
            hashMap.put("darkgreen", -16751616);
            hashMap.put("darkgrey", -5658199);
            hashMap.put("darkkhaki", -4343957);
            hashMap.put("darkmagenta", -7667573);
            hashMap.put("darkolivegreen", -11179217);
            hashMap.put("darkorange", -29696);
            hashMap.put("darkorchid", -6737204);
            hashMap.put("darkred", -7667712);
            hashMap.put("darksalmon", -1468806);
            hashMap.put("darkseagreen", -7357297);
            hashMap.put("darkslateblue", -12042869);
            hashMap.put("darkslategray", -13676721);
            hashMap.put("darkslategrey", -13676721);
            hashMap.put("darkturquoise", -16724271);
            hashMap.put("darkviolet", -7077677);
            hashMap.put("deeppink", -60269);
            hashMap.put("deepskyblue", -16728065);
            hashMap.put("dimgray", -9868951);
            hashMap.put("dimgrey", -9868951);
            hashMap.put("dodgerblue", -14774017);
            hashMap.put("firebrick", -5103070);
            hashMap.put("floralwhite", -1296);
            hashMap.put("forestgreen", -14513374);
            hashMap.put("fuchsia", -65281);
            hashMap.put("gainsboro", -2302756);
            hashMap.put("ghostwhite", -460545);
            hashMap.put("gold", -10496);
            hashMap.put("goldenrod", -2448096);
            hashMap.put("gray", -8355712);
            hashMap.put("green", -16744448);
            hashMap.put("greenyellow", -5374161);
            hashMap.put("grey", -8355712);
            hashMap.put("honeydew", -983056);
            hashMap.put("hotpink", -38476);
            hashMap.put("indianred", -3318692);
            hashMap.put("indigo", -11861886);
            hashMap.put("ivory", -16);
            hashMap.put("khaki", -989556);
            hashMap.put("lavender", -1644806);
            hashMap.put("lavenderblush", -3851);
            hashMap.put("lawngreen", -8586240);
            hashMap.put("lemonchiffon", -1331);
            hashMap.put("lightblue", -5383962);
            hashMap.put("lightcoral", -1015680);
            hashMap.put("lightcyan", -2031617);
            hashMap.put("lightgoldenrodyellow", -329006);
            hashMap.put("lightgray", -2894893);
            hashMap.put("lightgreen", -7278960);
            hashMap.put("lightgrey", -2894893);
            hashMap.put("lightpink", -18751);
            hashMap.put("lightsalmon", -24454);
            hashMap.put("lightseagreen", -14634326);
            hashMap.put("lightskyblue", -7876870);
            hashMap.put("lightslategray", -8943463);
            hashMap.put("lightslategrey", -8943463);
            hashMap.put("lightsteelblue", -5192482);
            hashMap.put("lightyellow", -32);
            hashMap.put("lime", -16711936);
            hashMap.put("limegreen", -13447886);
            hashMap.put("linen", -331546);
            hashMap.put("magenta", -65281);
            hashMap.put("maroon", -8388608);
            hashMap.put("mediumaquamarine", -10039894);
            hashMap.put("mediumblue", -16777011);
            hashMap.put("mediumorchid", -4565549);
            hashMap.put("mediumpurple", -7114533);
            hashMap.put("mediumseagreen", -12799119);
            hashMap.put("mediumslateblue", -8689426);
            hashMap.put("mediumspringgreen", -16713062);
            hashMap.put("mediumturquoise", -12004916);
            hashMap.put("mediumvioletred", -3730043);
            hashMap.put("midnightblue", -15132304);
            hashMap.put("mintcream", -655366);
            hashMap.put("mistyrose", -6943);
            hashMap.put("moccasin", -6987);
            hashMap.put("navajowhite", -8531);
            hashMap.put("navy", -16777088);
            hashMap.put("oldlace", -133658);
            hashMap.put("olive", -8355840);
            hashMap.put("olivedrab", -9728477);
            hashMap.put("orange", -23296);
            hashMap.put("orangered", -47872);
            hashMap.put("orchid", -2461482);
            hashMap.put("palegoldenrod", -1120086);
            hashMap.put("palegreen", -6751336);
            hashMap.put("paleturquoise", -5247250);
            hashMap.put("palevioletred", -2396013);
            hashMap.put("papayawhip", -4139);
            hashMap.put("peachpuff", -9543);
            hashMap.put("peru", -3308225);
            hashMap.put("pink", -16181);
            hashMap.put("plum", -2252579);
            hashMap.put("powderblue", -5185306);
            hashMap.put("purple", -8388480);
            hashMap.put("rebeccapurple", -10079335);
            hashMap.put("red", -65536);
            hashMap.put("rosybrown", -4419697);
            hashMap.put("royalblue", -12490271);
            hashMap.put("saddlebrown", -7650029);
            hashMap.put("salmon", -360334);
            hashMap.put("sandybrown", -744352);
            hashMap.put("seagreen", -13726889);
            hashMap.put("seashell", -2578);
            hashMap.put("sienna", -6270419);
            hashMap.put("silver", -4144960);
            hashMap.put("skyblue", -7876885);
            hashMap.put("slateblue", -9807155);
            hashMap.put("slategray", -9404272);
            hashMap.put("slategrey", -9404272);
            hashMap.put("snow", -1286);
            hashMap.put("springgreen", -16711809);
            hashMap.put("steelblue", -12156236);
            hashMap.put("tan", -2968436);
            hashMap.put("teal", -16744320);
            hashMap.put("thistle", -2572328);
            hashMap.put("tomato", -40121);
            hashMap.put("turquoise", -12525360);
            hashMap.put("violet", -1146130);
            hashMap.put("wheat", -663885);
            hashMap.put("white", -1);
            hashMap.put("whitesmoke", -657931);
            hashMap.put("yellow", -256);
            hashMap.put("yellowgreen", -6632142);
            hashMap.put("transparent", 0);
        }

        /* renamed from: a */
        public static Integer m12985a(String str) {
            return f9312a.get(str);
        }
    }

    /* renamed from: com.caverock.androidsvg.SVGParser$d */
    public static class C1887d {

        /* renamed from: a */
        public static final Map<String, SVG.C1857o> f9313a;

        static {
            HashMap hashMap = new HashMap(9);
            f9313a = hashMap;
            SVG.Unit unit = SVG.Unit.pt;
            hashMap.put("xx-small", new SVG.C1857o(0.694f, unit));
            hashMap.put("x-small", new SVG.C1857o(0.833f, unit));
            hashMap.put("small", new SVG.C1857o(10.0f, unit));
            hashMap.put("medium", new SVG.C1857o(12.0f, unit));
            hashMap.put("large", new SVG.C1857o(14.4f, unit));
            hashMap.put("x-large", new SVG.C1857o(17.3f, unit));
            hashMap.put("xx-large", new SVG.C1857o(20.7f, unit));
            SVG.Unit unit2 = SVG.Unit.percent;
            hashMap.put("smaller", new SVG.C1857o(83.33f, unit2));
            hashMap.put("larger", new SVG.C1857o(120.0f, unit2));
        }

        /* renamed from: a */
        public static SVG.C1857o m12986a(String str) {
            return f9313a.get(str);
        }
    }

    /* renamed from: com.caverock.androidsvg.SVGParser$e */
    public static class C1888e {

        /* renamed from: a */
        public static final Map<String, Integer> f9314a;

        static {
            HashMap hashMap = new HashMap(13);
            f9314a = hashMap;
            hashMap.put("normal", 400);
            hashMap.put("bold", 700);
            hashMap.put("bolder", 1);
            hashMap.put("lighter", -1);
            hashMap.put("100", 100);
            hashMap.put("200", Integer.valueOf(MlKitException.CODE_SCANNER_UNAVAILABLE));
            hashMap.put("300", 300);
            hashMap.put("400", 400);
            hashMap.put("500", 500);
            hashMap.put("600", 600);
            hashMap.put("700", 700);
            hashMap.put("800", 800);
            hashMap.put("900", 900);
        }

        /* renamed from: a */
        public static Integer m12987a(String str) {
            return f9314a.get(str);
        }
    }

    /* renamed from: com.caverock.androidsvg.SVGParser$f */
    public class C1889f extends DefaultHandler2 {
        public C1889f() {
        }

        public void characters(char[] cArr, int i, int i2) throws SAXException {
            SVGParser.this.mo12871c1(new String(cArr, i, i2));
        }

        public void endDocument() throws SAXException {
            SVGParser.this.mo12887o();
        }

        public void endElement(String str, String str2, String str3) throws SAXException {
            SVGParser.this.mo12888p(str, str2, str3);
        }

        public void processingInstruction(String str, String str2) throws SAXException {
            SVGParser.this.mo12890r(str, SVGParser.this.mo12895x0(new C1890g(str2)));
        }

        public void startDocument() throws SAXException {
            SVGParser.this.mo12862W0();
        }

        public void startElement(String str, String str2, String str3, Attributes attributes) throws SAXException {
            SVGParser.this.mo12864X0(str, str2, str3, attributes);
        }

        public /* synthetic */ C1889f(SVGParser sVGParser, C1884a aVar) {
            this();
        }
    }

    /* renamed from: com.caverock.androidsvg.SVGParser$g */
    public static class C1890g {

        /* renamed from: a */
        public String f9316a;

        /* renamed from: b */
        public int f9317b = 0;

        /* renamed from: c */
        public int f9318c = 0;

        /* renamed from: d */
        public mc4 f9319d = new mc4();

        public C1890g(String str) {
            String trim = str.trim();
            this.f9316a = trim;
            this.f9318c = trim.length();
        }

        /* renamed from: A */
        public void mo12904A() {
            while (true) {
                int i = this.f9317b;
                if (i < this.f9318c && mo12915k(this.f9316a.charAt(i))) {
                    this.f9317b++;
                } else {
                    return;
                }
            }
        }

        /* renamed from: a */
        public int mo12905a() {
            int i = this.f9317b;
            int i2 = this.f9318c;
            if (i == i2) {
                return -1;
            }
            int i3 = i + 1;
            this.f9317b = i3;
            if (i3 < i2) {
                return this.f9316a.charAt(i3);
            }
            return -1;
        }

        /* renamed from: b */
        public String mo12906b() {
            int i = this.f9317b;
            while (!mo12912h() && !mo12915k(this.f9316a.charAt(this.f9317b))) {
                this.f9317b++;
            }
            String substring = this.f9316a.substring(i, this.f9317b);
            this.f9317b = i;
            return substring;
        }

        /* renamed from: c */
        public Boolean mo12907c(Object obj) {
            if (obj == null) {
                return null;
            }
            mo12930z();
            return mo12917m();
        }

        /* renamed from: d */
        public float mo12908d(float f) {
            if (Float.isNaN(f)) {
                return Float.NaN;
            }
            mo12930z();
            return mo12918n();
        }

        /* renamed from: e */
        public float mo12909e(Boolean bool) {
            if (bool == null) {
                return Float.NaN;
            }
            mo12930z();
            return mo12918n();
        }

        /* renamed from: f */
        public boolean mo12910f(char c) {
            boolean z;
            int i = this.f9317b;
            if (i >= this.f9318c || this.f9316a.charAt(i) != c) {
                z = false;
            } else {
                z = true;
            }
            if (z) {
                this.f9317b++;
            }
            return z;
        }

        /* renamed from: g */
        public boolean mo12911g(String str) {
            boolean z;
            int length = str.length();
            int i = this.f9317b;
            if (i > this.f9318c - length || !this.f9316a.substring(i, i + length).equals(str)) {
                z = false;
            } else {
                z = true;
            }
            if (z) {
                this.f9317b += length;
            }
            return z;
        }

        /* renamed from: h */
        public boolean mo12912h() {
            if (this.f9317b == this.f9318c) {
                return true;
            }
            return false;
        }

        /* renamed from: i */
        public boolean mo12913i() {
            int i = this.f9317b;
            if (i == this.f9318c) {
                return false;
            }
            char charAt = this.f9316a.charAt(i);
            if ((charAt < 'a' || charAt > 'z') && (charAt < 'A' || charAt > 'Z')) {
                return false;
            }
            return true;
        }

        /* renamed from: j */
        public boolean mo12914j(int i) {
            return i == 10 || i == 13;
        }

        /* renamed from: k */
        public boolean mo12915k(int i) {
            return i == 32 || i == 10 || i == 13 || i == 9;
        }

        /* renamed from: l */
        public Integer mo12916l() {
            int i = this.f9317b;
            if (i == this.f9318c) {
                return null;
            }
            String str = this.f9316a;
            this.f9317b = i + 1;
            return Integer.valueOf(str.charAt(i));
        }

        /* renamed from: m */
        public Boolean mo12917m() {
            int i = this.f9317b;
            if (i == this.f9318c) {
                return null;
            }
            char charAt = this.f9316a.charAt(i);
            if (charAt != '0' && charAt != '1') {
                return null;
            }
            boolean z = true;
            this.f9317b++;
            if (charAt != '1') {
                z = false;
            }
            return Boolean.valueOf(z);
        }

        /* renamed from: n */
        public float mo12918n() {
            float b = this.f9319d.mo23138b(this.f9316a, this.f9317b, this.f9318c);
            if (!Float.isNaN(b)) {
                this.f9317b = this.f9319d.mo23137a();
            }
            return b;
        }

        /* renamed from: o */
        public String mo12919o() {
            if (mo12912h()) {
                return null;
            }
            int i = this.f9317b;
            int charAt = this.f9316a.charAt(i);
            while (true) {
                if ((charAt < 97 || charAt > 122) && (charAt < 65 || charAt > 90)) {
                    int i2 = this.f9317b;
                } else {
                    charAt = mo12905a();
                }
            }
            int i22 = this.f9317b;
            while (mo12915k(charAt)) {
                charAt = mo12905a();
            }
            if (charAt == 40) {
                this.f9317b++;
                return this.f9316a.substring(i, i22);
            }
            this.f9317b = i;
            return null;
        }

        /* renamed from: p */
        public SVG.C1857o mo12920p() {
            float n = mo12918n();
            if (Float.isNaN(n)) {
                return null;
            }
            SVG.Unit v = mo12926v();
            if (v == null) {
                return new SVG.C1857o(n, SVG.Unit.px);
            }
            return new SVG.C1857o(n, v);
        }

        /* renamed from: q */
        public String mo12921q() {
            if (mo12912h()) {
                return null;
            }
            int i = this.f9317b;
            char charAt = this.f9316a.charAt(i);
            if (charAt != '\'' && charAt != '\"') {
                return null;
            }
            int a = mo12905a();
            while (a != -1 && a != charAt) {
                a = mo12905a();
            }
            if (a == -1) {
                this.f9317b = i;
                return null;
            }
            int i2 = this.f9317b + 1;
            this.f9317b = i2;
            return this.f9316a.substring(i + 1, i2 - 1);
        }

        /* renamed from: r */
        public String mo12922r() {
            return mo12924t(' ', false);
        }

        /* renamed from: s */
        public String mo12923s(char c) {
            return mo12924t(c, false);
        }

        /* renamed from: t */
        public String mo12924t(char c, boolean z) {
            if (mo12912h()) {
                return null;
            }
            char charAt = this.f9316a.charAt(this.f9317b);
            if ((!z && mo12915k(charAt)) || charAt == c) {
                return null;
            }
            int i = this.f9317b;
            int a = mo12905a();
            while (a != -1 && a != c && (z || !mo12915k(a))) {
                a = mo12905a();
            }
            return this.f9316a.substring(i, this.f9317b);
        }

        /* renamed from: u */
        public String mo12925u(char c) {
            return mo12924t(c, true);
        }

        /* renamed from: v */
        public SVG.Unit mo12926v() {
            if (mo12912h()) {
                return null;
            }
            if (this.f9316a.charAt(this.f9317b) == '%') {
                this.f9317b++;
                return SVG.Unit.percent;
            }
            int i = this.f9317b;
            if (i > this.f9318c - 2) {
                return null;
            }
            try {
                SVG.Unit valueOf = SVG.Unit.valueOf(this.f9316a.substring(i, i + 2).toLowerCase(Locale.US));
                this.f9317b += 2;
                return valueOf;
            } catch (IllegalArgumentException unused) {
                return null;
            }
        }

        /* renamed from: w */
        public String mo12927w() {
            if (mo12912h()) {
                return null;
            }
            int i = this.f9317b;
            char charAt = this.f9316a.charAt(i);
            if ((charAt < 'A' || charAt > 'Z') && (charAt < 'a' || charAt > 'z')) {
                this.f9317b = i;
                return null;
            }
            int a = mo12905a();
            while (true) {
                if ((a >= 65 && a <= 90) || (a >= 97 && a <= 122)) {
                    a = mo12905a();
                }
            }
            return this.f9316a.substring(i, this.f9317b);
        }

        /* renamed from: x */
        public float mo12928x() {
            mo12930z();
            float b = this.f9319d.mo23138b(this.f9316a, this.f9317b, this.f9318c);
            if (!Float.isNaN(b)) {
                this.f9317b = this.f9319d.mo23137a();
            }
            return b;
        }

        /* renamed from: y */
        public String mo12929y() {
            if (mo12912h()) {
                return null;
            }
            int i = this.f9317b;
            this.f9317b = this.f9318c;
            return this.f9316a.substring(i);
        }

        /* renamed from: z */
        public boolean mo12930z() {
            mo12904A();
            int i = this.f9317b;
            if (i == this.f9318c || this.f9316a.charAt(i) != ',') {
                return false;
            }
            this.f9317b++;
            mo12904A();
            return true;
        }
    }

    /* renamed from: com.caverock.androidsvg.SVGParser$h */
    public class C1891h implements Attributes {

        /* renamed from: a */
        public XmlPullParser f9320a;

        public C1891h(XmlPullParser xmlPullParser) {
            this.f9320a = xmlPullParser;
        }

        public int getIndex(String str) {
            return -1;
        }

        public int getIndex(String str, String str2) {
            return -1;
        }

        public int getLength() {
            return this.f9320a.getAttributeCount();
        }

        public String getLocalName(int i) {
            return this.f9320a.getAttributeName(i);
        }

        public String getQName(int i) {
            String attributeName = this.f9320a.getAttributeName(i);
            if (this.f9320a.getAttributePrefix(i) == null) {
                return attributeName;
            }
            return this.f9320a.getAttributePrefix(i) + ':' + attributeName;
        }

        public String getType(int i) {
            return null;
        }

        public String getType(String str) {
            return null;
        }

        public String getType(String str, String str2) {
            return null;
        }

        public String getURI(int i) {
            return this.f9320a.getAttributeNamespace(i);
        }

        public String getValue(int i) {
            return this.f9320a.getAttributeValue(i);
        }

        public String getValue(String str) {
            return null;
        }

        public String getValue(String str, String str2) {
            return null;
        }
    }

    /* renamed from: A0 */
    public static Set<String> m12869A0(String str) {
        C1890g gVar = new C1890g(str);
        HashSet hashSet = new HashSet();
        while (!gVar.mo12912h()) {
            hashSet.add(gVar.mo12922r());
            gVar.mo12904A();
        }
        return hashSet;
    }

    /* renamed from: B0 */
    public static SVG.C1857o[] m12870B0(String str) {
        SVG.C1857o p;
        C1890g gVar = new C1890g(str);
        gVar.mo12904A();
        if (gVar.mo12912h() || (p = gVar.mo12920p()) == null || p.mo12793i()) {
            return null;
        }
        float a = p.mo12787a();
        ArrayList arrayList = new ArrayList();
        arrayList.add(p);
        while (!gVar.mo12912h()) {
            gVar.mo12930z();
            SVG.C1857o p2 = gVar.mo12920p();
            if (p2 == null || p2.mo12793i()) {
                return null;
            }
            arrayList.add(p2);
            a += p2.mo12787a();
        }
        if (a == Utils.FLOAT_EPSILON) {
            return null;
        }
        return (SVG.C1857o[]) arrayList.toArray(new SVG.C1857o[arrayList.size()]);
    }

    /* renamed from: C0 */
    public static SVG.Style.LineCap m12871C0(String str) {
        if ("butt".equals(str)) {
            return SVG.Style.LineCap.Butt;
        }
        if ("round".equals(str)) {
            return SVG.Style.LineCap.Round;
        }
        if ("square".equals(str)) {
            return SVG.Style.LineCap.Square;
        }
        return null;
    }

    /* renamed from: D0 */
    public static SVG.Style.LineJoin m12872D0(String str) {
        if ("miter".equals(str)) {
            return SVG.Style.LineJoin.Miter;
        }
        if ("round".equals(str)) {
            return SVG.Style.LineJoin.Round;
        }
        if ("bevel".equals(str)) {
            return SVG.Style.LineJoin.Bevel;
        }
        return null;
    }

    /* renamed from: E0 */
    public static void m12873E0(SVG.C1848j0 j0Var, String str) {
        C1890g gVar = new C1890g(str.replaceAll("/\\*.*?\\*/", ""));
        while (true) {
            String s = gVar.mo12923s(':');
            gVar.mo12904A();
            if (gVar.mo12910f(':')) {
                gVar.mo12904A();
                String u = gVar.mo12925u(';');
                if (u != null) {
                    gVar.mo12904A();
                    if (gVar.mo12912h() || gVar.mo12910f(';')) {
                        if (j0Var.f9202f == null) {
                            j0Var.f9202f = new SVG.Style();
                        }
                        m12880S0(j0Var.f9202f, s, u);
                        gVar.mo12904A();
                    }
                } else {
                    return;
                }
            } else {
                return;
            }
        }
    }

    /* renamed from: F0 */
    public static Set<String> m12874F0(String str) {
        C1890g gVar = new C1890g(str);
        HashSet hashSet = new HashSet();
        while (!gVar.mo12912h()) {
            String r = gVar.mo12922r();
            int indexOf = r.indexOf(45);
            if (indexOf != -1) {
                r = r.substring(0, indexOf);
            }
            hashSet.add(new Locale(r, "", "").getLanguage());
            gVar.mo12904A();
        }
        return hashSet;
    }

    /* renamed from: G0 */
    public static SVG.Style.TextAnchor m12875G0(String str) {
        str.hashCode();
        char c = 65535;
        switch (str.hashCode()) {
            case -1074341483:
                if (str.equals("middle")) {
                    c = 0;
                    break;
                }
                break;
            case 100571:
                if (str.equals("end")) {
                    c = 1;
                    break;
                }
                break;
            case 109757538:
                if (str.equals("start")) {
                    c = 2;
                    break;
                }
                break;
        }
        switch (c) {
            case 0:
                return SVG.Style.TextAnchor.Middle;
            case 1:
                return SVG.Style.TextAnchor.End;
            case 2:
                return SVG.Style.TextAnchor.Start;
            default:
                return null;
        }
    }

    /* renamed from: H0 */
    public static SVG.Style.TextDecoration m12876H0(String str) {
        str.hashCode();
        char c = 65535;
        switch (str.hashCode()) {
            case -1171789332:
                if (str.equals("line-through")) {
                    c = 0;
                    break;
                }
                break;
            case -1026963764:
                if (str.equals("underline")) {
                    c = 1;
                    break;
                }
                break;
            case 3387192:
                if (str.equals("none")) {
                    c = 2;
                    break;
                }
                break;
            case 93826908:
                if (str.equals("blink")) {
                    c = 3;
                    break;
                }
                break;
            case 529818312:
                if (str.equals("overline")) {
                    c = 4;
                    break;
                }
                break;
        }
        switch (c) {
            case 0:
                return SVG.Style.TextDecoration.LineThrough;
            case 1:
                return SVG.Style.TextDecoration.Underline;
            case 2:
                return SVG.Style.TextDecoration.None;
            case 3:
                return SVG.Style.TextDecoration.Blink;
            case 4:
                return SVG.Style.TextDecoration.Overline;
            default:
                return null;
        }
    }

    /* renamed from: I0 */
    public static SVG.Style.TextDirection m12877I0(String str) {
        str.hashCode();
        if (str.equals("ltr")) {
            return SVG.Style.TextDirection.LTR;
        }
        if (!str.equals("rtl")) {
            return null;
        }
        return SVG.Style.TextDirection.RTL;
    }

    /* renamed from: M0 */
    public static SVG.Style.VectorEffect m12878M0(String str) {
        str.hashCode();
        if (str.equals("none")) {
            return SVG.Style.VectorEffect.None;
        }
        if (!str.equals("non-scaling-stroke")) {
            return null;
        }
        return SVG.Style.VectorEffect.NonScalingStroke;
    }

    /* renamed from: N0 */
    public static SVG.C1829b m12879N0(String str) throws SVGParseException {
        C1890g gVar = new C1890g(str);
        gVar.mo12904A();
        float n = gVar.mo12918n();
        gVar.mo12930z();
        float n2 = gVar.mo12918n();
        gVar.mo12930z();
        float n3 = gVar.mo12918n();
        gVar.mo12930z();
        float n4 = gVar.mo12918n();
        if (Float.isNaN(n) || Float.isNaN(n2) || Float.isNaN(n3) || Float.isNaN(n4)) {
            throw new SVGParseException("Invalid viewBox definition - should have four numbers");
        } else if (n3 < Utils.FLOAT_EPSILON) {
            throw new SVGParseException("Invalid viewBox. width cannot be negative");
        } else if (n4 >= Utils.FLOAT_EPSILON) {
            return new SVG.C1829b(n, n2, n3, n4);
        } else {
            throw new SVGParseException("Invalid viewBox. height cannot be negative");
        }
    }

    /* renamed from: S0 */
    public static void m12880S0(SVG.Style style, String str, String str2) {
        if (str2.length() != 0 && !str2.equals("inherit")) {
            switch (C1884a.f9310b[SVGAttr.fromString(str).ordinal()]) {
                case 47:
                    SVG.C1854m0 t0 = m12909t0(str2);
                    style.f9100d = t0;
                    if (t0 != null) {
                        style.f9098a |= 1;
                        return;
                    }
                    return;
                case 48:
                    SVG.Style.FillRule e0 = m12890e0(str2);
                    style.f9101e = e0;
                    if (e0 != null) {
                        style.f9098a |= 2;
                        return;
                    }
                    return;
                case 49:
                    Float r0 = m12905r0(str2);
                    style.f9104g = r0;
                    if (r0 != null) {
                        style.f9098a |= 4;
                        return;
                    }
                    return;
                case 50:
                    SVG.C1854m0 t02 = m12909t0(str2);
                    style.f9105k = t02;
                    if (t02 != null) {
                        style.f9098a |= 8;
                        return;
                    }
                    return;
                case 51:
                    Float r02 = m12905r0(str2);
                    style.f9110r = r02;
                    if (r02 != null) {
                        style.f9098a |= 16;
                        return;
                    }
                    return;
                case 52:
                    style.f9112s = m12902o0(str2);
                    style.f9098a |= 32;
                    return;
                case 53:
                    SVG.Style.LineCap C0 = m12871C0(str2);
                    style.f9119x = C0;
                    if (C0 != null) {
                        style.f9098a |= 64;
                        return;
                    }
                    return;
                case 54:
                    SVG.Style.LineJoin D0 = m12872D0(str2);
                    style.f9121y = D0;
                    if (D0 != null) {
                        style.f9098a |= 128;
                        return;
                    }
                    return;
                case 55:
                    style.f9085A = Float.valueOf(m12892f0(str2));
                    style.f9098a |= 256;
                    return;
                case 56:
                    if ("none".equals(str2)) {
                        style.f9086B = null;
                        style.f9098a |= 512;
                        return;
                    }
                    SVG.C1857o[] B0 = m12870B0(str2);
                    style.f9086B = B0;
                    if (B0 != null) {
                        style.f9098a |= 512;
                        return;
                    }
                    return;
                case 57:
                    style.f9087C = m12902o0(str2);
                    style.f9098a |= RealWebSocket.DEFAULT_MINIMUM_DEFLATE_SIZE;
                    return;
                case 58:
                    style.f9088H = m12905r0(str2);
                    style.f9098a |= 2048;
                    return;
                case 59:
                    try {
                        style.f9089I = m12884b0(str2);
                        style.f9098a |= 4096;
                        return;
                    } catch (SVGParseException unused) {
                    }
                case 60:
                    m12895h0(style, str2);
                    return;
                case 61:
                    List<String> i0 = m12896i0(str2);
                    style.f9090L = i0;
                    if (i0 != null) {
                        style.f9098a |= 8192;
                        return;
                    }
                    return;
                case 62:
                    SVG.C1857o j0 = m12898j0(str2);
                    style.f9091M = j0;
                    if (j0 != null) {
                        style.f9098a |= Http2Stream.EMIT_BUFFER_SIZE;
                        return;
                    }
                    return;
                case 63:
                    Integer l0 = m12900l0(str2);
                    style.f9092P = l0;
                    if (l0 != null) {
                        style.f9098a |= 32768;
                        return;
                    }
                    return;
                case 64:
                    SVG.Style.FontStyle k0 = m12899k0(str2);
                    style.f9093Q = k0;
                    if (k0 != null) {
                        style.f9098a |= 65536;
                        return;
                    }
                    return;
                case 65:
                    SVG.Style.TextDecoration H0 = m12876H0(str2);
                    style.f9094U = H0;
                    if (H0 != null) {
                        style.f9098a |= 131072;
                        return;
                    }
                    return;
                case 66:
                    SVG.Style.TextDirection I0 = m12877I0(str2);
                    style.f9095X = I0;
                    if (I0 != null) {
                        style.f9098a |= 68719476736L;
                        return;
                    }
                    return;
                case 67:
                    SVG.Style.TextAnchor G0 = m12875G0(str2);
                    style.f9096Y = G0;
                    if (G0 != null) {
                        style.f9098a |= 262144;
                        return;
                    }
                    return;
                case 68:
                    Boolean s0 = m12907s0(str2);
                    style.f9097Z = s0;
                    if (s0 != null) {
                        style.f9098a |= 524288;
                        return;
                    }
                    return;
                case 69:
                    String m0 = m12901m0(str2, str);
                    style.f9106k0 = m0;
                    style.f9116v0 = m0;
                    style.f9099b1 = m0;
                    style.f9098a |= 14680064;
                    return;
                case 70:
                    style.f9106k0 = m12901m0(str2, str);
                    style.f9098a |= 2097152;
                    return;
                case 71:
                    style.f9116v0 = m12901m0(str2, str);
                    style.f9098a |= 4194304;
                    return;
                case 72:
                    style.f9099b1 = m12901m0(str2, str);
                    style.f9098a |= 8388608;
                    return;
                case 73:
                    if (str2.indexOf(124) < 0) {
                        if ("|inline|block|list-item|run-in|compact|marker|table|inline-table|table-row-group|table-header-group|table-footer-group|table-row|table-column-group|table-column|table-cell|table-caption|none|".contains('|' + str2 + '|')) {
                            style.f9103e1 = Boolean.valueOf(!str2.equals("none"));
                            style.f9098a |= 16777216;
                            return;
                        }
                        return;
                    }
                    return;
                case 74:
                    if (str2.indexOf(124) < 0) {
                        if ("|visible|hidden|collapse|".contains('|' + str2 + '|')) {
                            style.f9107o1 = Boolean.valueOf(str2.equals("visible"));
                            style.f9098a |= 33554432;
                            return;
                        }
                        return;
                    }
                    return;
                case 75:
                    if (str2.equals("currentColor")) {
                        style.f9108p1 = SVG.C1841g.m12788a();
                    } else {
                        try {
                            style.f9108p1 = m12884b0(str2);
                        } catch (SVGParseException e) {
                            e.getMessage();
                            return;
                        }
                    }
                    style.f9098a |= 67108864;
                    return;
                case 76:
                    style.f9109q1 = m12905r0(str2);
                    style.f9098a |= 134217728;
                    return;
                case 77:
                    SVG.C1832c a0 = m12882a0(str2);
                    style.f9102e0 = a0;
                    if (a0 != null) {
                        style.f9098a |= 1048576;
                        return;
                    }
                    return;
                case 78:
                    style.f9111r1 = m12901m0(str2, str);
                    style.f9098a |= 268435456;
                    return;
                case 79:
                    style.f9113s1 = m12890e0(str2);
                    style.f9098a |= 536870912;
                    return;
                case 80:
                    style.f9114t1 = m12901m0(str2, str);
                    style.f9098a |= 1073741824;
                    return;
                case 81:
                    if (str2.equals("currentColor")) {
                        style.f9115u1 = SVG.C1841g.m12788a();
                    } else {
                        try {
                            style.f9115u1 = m12884b0(str2);
                        } catch (SVGParseException e2) {
                            e2.getMessage();
                            return;
                        }
                    }
                    style.f9098a |= 2147483648L;
                    return;
                case 82:
                    style.f9117v1 = m12905r0(str2);
                    style.f9098a |= 4294967296L;
                    return;
                case 83:
                    if (str2.equals("currentColor")) {
                        style.f9118w1 = SVG.C1841g.m12788a();
                    } else {
                        try {
                            style.f9118w1 = m12884b0(str2);
                        } catch (SVGParseException e3) {
                            e3.getMessage();
                            return;
                        }
                    }
                    style.f9098a |= 8589934592L;
                    return;
                case 84:
                    style.f9120x1 = m12905r0(str2);
                    style.f9098a |= 17179869184L;
                    return;
                case 85:
                    SVG.Style.VectorEffect M0 = m12878M0(str2);
                    style.f9122y1 = M0;
                    if (M0 != null) {
                        style.f9098a |= 34359738368L;
                        return;
                    }
                    return;
                case 86:
                    SVG.Style.RenderQuality y0 = m12913y0(str2);
                    style.f9123z1 = y0;
                    if (y0 != null) {
                        style.f9098a |= 137438953472L;
                        return;
                    }
                    return;
                default:
                    return;
            }
        }
    }

    /* renamed from: a0 */
    public static SVG.C1832c m12882a0(String str) {
        if ("auto".equals(str) || !str.startsWith("rect(")) {
            return null;
        }
        C1890g gVar = new C1890g(str.substring(5));
        gVar.mo12904A();
        SVG.C1857o q0 = m12904q0(gVar);
        gVar.mo12930z();
        SVG.C1857o q02 = m12904q0(gVar);
        gVar.mo12930z();
        SVG.C1857o q03 = m12904q0(gVar);
        gVar.mo12930z();
        SVG.C1857o q04 = m12904q0(gVar);
        gVar.mo12904A();
        if (gVar.mo12910f(')') || gVar.mo12912h()) {
            return new SVG.C1832c(q0, q02, q03, q04);
        }
        return null;
    }

    /* renamed from: b0 */
    public static SVG.C1839f m12884b0(String str) throws SVGParseException {
        int i = 5;
        if (str.charAt(0) == '#') {
            dx2 b = dx2.m15490b(str, 1, str.length());
            if (b != null) {
                int a = b.mo18999a();
                if (a == 4) {
                    int d = b.mo19000d();
                    int i2 = d & 3840;
                    int i3 = d & 240;
                    int i4 = d & 15;
                    return new SVG.C1839f(i4 | (i2 << 8) | -16777216 | (i2 << 12) | (i3 << 8) | (i3 << 4) | (i4 << 4));
                } else if (a == 5) {
                    int d2 = b.mo19000d();
                    int i5 = 61440 & d2;
                    int i6 = d2 & 3840;
                    int i7 = d2 & 240;
                    int i8 = d2 & 15;
                    return new SVG.C1839f((i8 << 24) | (i8 << 28) | (i5 << 8) | (i5 << 4) | (i6 << 4) | i6 | i7 | (i7 >> 4));
                } else if (a == 7) {
                    return new SVG.C1839f(b.mo19000d() | -16777216);
                } else {
                    if (a == 9) {
                        return new SVG.C1839f((b.mo19000d() >>> 8) | (b.mo19000d() << 24));
                    }
                    throw new SVGParseException("Bad hex colour value: " + str);
                }
            } else {
                throw new SVGParseException("Bad hex colour value: " + str);
            }
        } else {
            String lowerCase = str.toLowerCase(Locale.US);
            boolean startsWith = lowerCase.startsWith("rgba(");
            if (startsWith || lowerCase.startsWith("rgb(")) {
                if (!startsWith) {
                    i = 4;
                }
                C1890g gVar = new C1890g(str.substring(i));
                gVar.mo12904A();
                float n = gVar.mo12918n();
                if (!Float.isNaN(n) && gVar.mo12910f('%')) {
                    n = (n * 256.0f) / 100.0f;
                }
                float d3 = gVar.mo12908d(n);
                if (!Float.isNaN(d3) && gVar.mo12910f('%')) {
                    d3 = (d3 * 256.0f) / 100.0f;
                }
                float d4 = gVar.mo12908d(d3);
                if (!Float.isNaN(d4) && gVar.mo12910f('%')) {
                    d4 = (d4 * 256.0f) / 100.0f;
                }
                if (startsWith) {
                    float d5 = gVar.mo12908d(d4);
                    gVar.mo12904A();
                    if (!Float.isNaN(d5) && gVar.mo12910f(')')) {
                        return new SVG.C1839f((m12897j(d5 * 256.0f) << 24) | (m12897j(n) << 16) | (m12897j(d3) << 8) | m12897j(d4));
                    }
                    throw new SVGParseException("Bad rgba() colour value: " + str);
                }
                gVar.mo12904A();
                if (!Float.isNaN(d4) && gVar.mo12910f(')')) {
                    return new SVG.C1839f((m12897j(n) << 16) | -16777216 | (m12897j(d3) << 8) | m12897j(d4));
                }
                throw new SVGParseException("Bad rgb() colour value: " + str);
            }
            boolean startsWith2 = lowerCase.startsWith("hsla(");
            if (!startsWith2 && !lowerCase.startsWith("hsl(")) {
                return m12886c0(lowerCase);
            }
            if (!startsWith2) {
                i = 4;
            }
            C1890g gVar2 = new C1890g(str.substring(i));
            gVar2.mo12904A();
            float n2 = gVar2.mo12918n();
            float d6 = gVar2.mo12908d(n2);
            if (!Float.isNaN(d6)) {
                gVar2.mo12910f('%');
            }
            float d7 = gVar2.mo12908d(d6);
            if (!Float.isNaN(d7)) {
                gVar2.mo12910f('%');
            }
            if (startsWith2) {
                float d8 = gVar2.mo12908d(d7);
                gVar2.mo12904A();
                if (!Float.isNaN(d8) && gVar2.mo12910f(')')) {
                    return new SVG.C1839f((m12897j(d8 * 256.0f) << 24) | m12906s(n2, d6, d7));
                }
                throw new SVGParseException("Bad hsla() colour value: " + str);
            }
            gVar2.mo12904A();
            if (!Float.isNaN(d7) && gVar2.mo12910f(')')) {
                return new SVG.C1839f(m12906s(n2, d6, d7) | -16777216);
            }
            throw new SVGParseException("Bad hsl() colour value: " + str);
        }
    }

    /* renamed from: c0 */
    public static SVG.C1839f m12886c0(String str) throws SVGParseException {
        Integer a = C1886c.m12985a(str);
        if (a != null) {
            return new SVG.C1839f(a.intValue());
        }
        throw new SVGParseException("Invalid colour keyword: " + str);
    }

    /* renamed from: d0 */
    public static SVG.C1854m0 m12888d0(String str) {
        str.hashCode();
        if (str.equals("none")) {
            return SVG.C1839f.f9175e;
        }
        if (str.equals("currentColor")) {
            return SVG.C1841g.m12788a();
        }
        try {
            return m12884b0(str);
        } catch (SVGParseException unused) {
            return null;
        }
    }

    /* renamed from: e0 */
    public static SVG.Style.FillRule m12890e0(String str) {
        if ("nonzero".equals(str)) {
            return SVG.Style.FillRule.NonZero;
        }
        if ("evenodd".equals(str)) {
            return SVG.Style.FillRule.EvenOdd;
        }
        return null;
    }

    /* renamed from: f0 */
    public static float m12892f0(String str) throws SVGParseException {
        int length = str.length();
        if (length != 0) {
            return m12894g0(str, 0, length);
        }
        throw new SVGParseException("Invalid float value (empty string)");
    }

    /* renamed from: g0 */
    public static float m12894g0(String str, int i, int i2) throws SVGParseException {
        float b = new mc4().mo23138b(str, i, i2);
        if (!Float.isNaN(b)) {
            return b;
        }
        throw new SVGParseException("Invalid float value: " + str);
    }

    /* renamed from: h0 */
    public static void m12895h0(SVG.Style style, String str) {
        String s;
        int i;
        if ("|caption|icon|menu|message-box|small-caption|status-bar|".contains('|' + str + '|')) {
            C1890g gVar = new C1890g(str);
            Integer num = null;
            SVG.Style.FontStyle fontStyle = null;
            String str2 = null;
            while (true) {
                s = gVar.mo12923s('/');
                gVar.mo12904A();
                if (s != null) {
                    if (num == null || fontStyle == null) {
                        if (!s.equals("normal") && ((num != null || (num = C1888e.m12987a(s)) == null) && (fontStyle != null || (fontStyle = m12899k0(s)) == null))) {
                            if (str2 != null || !s.equals("small-caps")) {
                                break;
                            }
                            str2 = s;
                        }
                    } else {
                        break;
                    }
                } else {
                    return;
                }
            }
            SVG.C1857o j0 = m12898j0(s);
            if (gVar.mo12910f('/')) {
                gVar.mo12904A();
                String r = gVar.mo12922r();
                if (r != null) {
                    try {
                        m12902o0(r);
                    } catch (SVGParseException unused) {
                        return;
                    }
                }
                gVar.mo12904A();
            }
            style.f9090L = m12896i0(gVar.mo12929y());
            style.f9091M = j0;
            if (num == null) {
                i = 400;
            } else {
                i = num.intValue();
            }
            style.f9092P = Integer.valueOf(i);
            if (fontStyle == null) {
                fontStyle = SVG.Style.FontStyle.Normal;
            }
            style.f9093Q = fontStyle;
            style.f9098a |= 122880;
        }
    }

    /* renamed from: i0 */
    public static List<String> m12896i0(String str) {
        C1890g gVar = new C1890g(str);
        ArrayList arrayList = null;
        do {
            String q = gVar.mo12921q();
            if (q == null) {
                q = gVar.mo12925u(',');
            }
            if (q == null) {
                break;
            }
            if (arrayList == null) {
                arrayList = new ArrayList();
            }
            arrayList.add(q);
            gVar.mo12930z();
        } while (!gVar.mo12912h());
        return arrayList;
    }

    /* renamed from: j */
    public static int m12897j(float f) {
        if (f < Utils.FLOAT_EPSILON) {
            return 0;
        }
        if (f > 255.0f) {
            return 255;
        }
        return Math.round(f);
    }

    /* renamed from: j0 */
    public static SVG.C1857o m12898j0(String str) {
        try {
            SVG.C1857o a = C1887d.m12986a(str);
            if (a == null) {
                return m12902o0(str);
            }
            return a;
        } catch (SVGParseException unused) {
            return null;
        }
    }

    /* renamed from: k0 */
    public static SVG.Style.FontStyle m12899k0(String str) {
        str.hashCode();
        char c = 65535;
        switch (str.hashCode()) {
            case -1657669071:
                if (str.equals("oblique")) {
                    c = 0;
                    break;
                }
                break;
            case -1178781136:
                if (str.equals("italic")) {
                    c = 1;
                    break;
                }
                break;
            case -1039745817:
                if (str.equals("normal")) {
                    c = 2;
                    break;
                }
                break;
        }
        switch (c) {
            case 0:
                return SVG.Style.FontStyle.Oblique;
            case 1:
                return SVG.Style.FontStyle.Italic;
            case 2:
                return SVG.Style.FontStyle.Normal;
            default:
                return null;
        }
    }

    /* renamed from: l0 */
    public static Integer m12900l0(String str) {
        return C1888e.m12987a(str);
    }

    /* renamed from: m0 */
    public static String m12901m0(String str, String str2) {
        if (str.equals("none") || !str.startsWith("url(")) {
            return null;
        }
        if (str.endsWith(")")) {
            return str.substring(4, str.length() - 1).trim();
        }
        return str.substring(4).trim();
    }

    /* renamed from: o0 */
    public static SVG.C1857o m12902o0(String str) throws SVGParseException {
        if (str.length() != 0) {
            int length = str.length();
            SVG.Unit unit = SVG.Unit.px;
            char charAt = str.charAt(length - 1);
            if (charAt == '%') {
                length--;
                unit = SVG.Unit.percent;
            } else if (length > 2 && Character.isLetter(charAt) && Character.isLetter(str.charAt(length - 2))) {
                length -= 2;
                try {
                    unit = SVG.Unit.valueOf(str.substring(length).toLowerCase(Locale.US));
                } catch (IllegalArgumentException unused) {
                    throw new SVGParseException("Invalid length unit specifier: " + str);
                }
            }
            try {
                return new SVG.C1857o(m12894g0(str, 0, length), unit);
            } catch (NumberFormatException e) {
                throw new SVGParseException("Invalid length value: " + str, e);
            }
        } else {
            throw new SVGParseException("Invalid length value (empty string)");
        }
    }

    /* renamed from: p0 */
    public static List<SVG.C1857o> m12903p0(String str) throws SVGParseException {
        if (str.length() != 0) {
            ArrayList arrayList = new ArrayList(1);
            C1890g gVar = new C1890g(str);
            gVar.mo12904A();
            while (!gVar.mo12912h()) {
                float n = gVar.mo12918n();
                if (!Float.isNaN(n)) {
                    SVG.Unit v = gVar.mo12926v();
                    if (v == null) {
                        v = SVG.Unit.px;
                    }
                    arrayList.add(new SVG.C1857o(n, v));
                    gVar.mo12930z();
                } else {
                    throw new SVGParseException("Invalid length list value: " + gVar.mo12906b());
                }
            }
            return arrayList;
        }
        throw new SVGParseException("Invalid length list (empty string)");
    }

    /* renamed from: q0 */
    public static SVG.C1857o m12904q0(C1890g gVar) {
        if (gVar.mo12911g("auto")) {
            return new SVG.C1857o(Utils.FLOAT_EPSILON);
        }
        return gVar.mo12920p();
    }

    /* renamed from: r0 */
    public static Float m12905r0(String str) {
        try {
            float f0 = m12892f0(str);
            if (f0 < Utils.FLOAT_EPSILON) {
                f0 = 0.0f;
            } else if (f0 > 1.0f) {
                f0 = 1.0f;
            }
            return Float.valueOf(f0);
        } catch (SVGParseException unused) {
            return null;
        }
    }

    /* renamed from: s */
    public static int m12906s(float f, float f2, float f3) {
        float f4;
        float f5 = Utils.FLOAT_EPSILON;
        int i = (f > Utils.FLOAT_EPSILON ? 1 : (f == Utils.FLOAT_EPSILON ? 0 : -1));
        float f6 = f % 360.0f;
        if (i < 0) {
            f6 += 360.0f;
        }
        float f7 = f6 / 60.0f;
        float f8 = f2 / 100.0f;
        float f9 = f3 / 100.0f;
        if (f8 < Utils.FLOAT_EPSILON) {
            f8 = 0.0f;
        } else if (f8 > 1.0f) {
            f8 = 1.0f;
        }
        if (f9 >= Utils.FLOAT_EPSILON) {
            if (f9 > 1.0f) {
                f5 = 1.0f;
            } else {
                f5 = f9;
            }
        }
        if (f5 <= 0.5f) {
            f4 = (f8 + 1.0f) * f5;
        } else {
            f4 = (f5 + f8) - (f8 * f5);
        }
        float f10 = (f5 * 2.0f) - f4;
        return m12897j(m12908t(f10, f4, f7 - 2.0f) * 256.0f) | (m12897j(m12908t(f10, f4, f7 + 2.0f) * 256.0f) << 16) | (m12897j(m12908t(f10, f4, f7) * 256.0f) << 8);
    }

    /* renamed from: s0 */
    public static Boolean m12907s0(String str) {
        str.hashCode();
        char c = 65535;
        switch (str.hashCode()) {
            case -1217487446:
                if (str.equals("hidden")) {
                    c = 0;
                    break;
                }
                break;
            case -907680051:
                if (str.equals("scroll")) {
                    c = 1;
                    break;
                }
                break;
            case 3005871:
                if (str.equals("auto")) {
                    c = 2;
                    break;
                }
                break;
            case 466743410:
                if (str.equals("visible")) {
                    c = 3;
                    break;
                }
                break;
        }
        switch (c) {
            case 0:
            case 1:
                return Boolean.FALSE;
            case 2:
            case 3:
                return Boolean.TRUE;
            default:
                return null;
        }
    }

    /* renamed from: t */
    public static float m12908t(float f, float f2, float f3) {
        float f4;
        if (f3 < Utils.FLOAT_EPSILON) {
            f3 += 6.0f;
        }
        if (f3 >= 6.0f) {
            f3 -= 6.0f;
        }
        if (f3 < 1.0f) {
            f4 = (f2 - f) * f3;
        } else if (f3 < 3.0f) {
            return f2;
        } else {
            if (f3 >= 4.0f) {
                return f;
            }
            f4 = (f2 - f) * (4.0f - f3);
        }
        return f4 + f;
    }

    /* renamed from: t0 */
    public static SVG.C1854m0 m12909t0(String str) {
        if (!str.startsWith("url(")) {
            return m12888d0(str);
        }
        int indexOf = str.indexOf(")");
        SVG.C1854m0 m0Var = null;
        if (indexOf == -1) {
            return new SVG.C1867t(str.substring(4).trim(), (SVG.C1854m0) null);
        }
        String trim = str.substring(4, indexOf).trim();
        String trim2 = str.substring(indexOf + 1).trim();
        if (trim2.length() > 0) {
            m0Var = m12888d0(trim2);
        }
        return new SVG.C1867t(trim, m0Var);
    }

    /* JADX WARNING: Code restructure failed: missing block: B:12:0x0041, code lost:
        r4 = r3;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:80:0x01e5, code lost:
        r2 = r8;
        r1 = r15;
        r3 = r16;
        r4 = r17;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:91:0x023b, code lost:
        r0.mo12930z();
     */
    /* JADX WARNING: Code restructure failed: missing block: B:92:0x0242, code lost:
        if (r0.mo12912h() == false) goto L_0x0245;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:93:0x0244, code lost:
        return r9;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:95:0x0249, code lost:
        if (r0.mo12913i() == false) goto L_0x0253;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:96:0x024b, code lost:
        r12 = r0.mo12916l().intValue();
     */
    /* renamed from: u0 */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public static com.caverock.androidsvg.SVG.C1871v m12910u0(java.lang.String r18) {
        /*
            com.caverock.androidsvg.SVGParser$g r0 = new com.caverock.androidsvg.SVGParser$g
            r1 = r18
            r0.<init>(r1)
            com.caverock.androidsvg.SVG$v r9 = new com.caverock.androidsvg.SVG$v
            r9.<init>()
            boolean r1 = r0.mo12912h()
            if (r1 == 0) goto L_0x0013
            return r9
        L_0x0013:
            java.lang.Integer r1 = r0.mo12916l()
            int r1 = r1.intValue()
            r2 = 77
            r10 = 109(0x6d, float:1.53E-43)
            if (r1 == r2) goto L_0x0024
            if (r1 == r10) goto L_0x0024
            return r9
        L_0x0024:
            r11 = 0
            r12 = r1
            r1 = r11
            r2 = r1
            r3 = r2
            r4 = r3
            r13 = r4
            r14 = r13
        L_0x002c:
            r0.mo12904A()
            r5 = 108(0x6c, float:1.51E-43)
            r6 = 1073741824(0x40000000, float:2.0)
            java.lang.String r7 = " path segment"
            java.lang.String r8 = "Bad path coords for "
            switch(r12) {
                case 65: goto L_0x01ec;
                case 67: goto L_0x019e;
                case 72: goto L_0x0178;
                case 76: goto L_0x014e;
                case 77: goto L_0x0115;
                case 81: goto L_0x00e0;
                case 83: goto L_0x009a;
                case 84: goto L_0x0068;
                case 86: goto L_0x0044;
                case 90: goto L_0x003b;
                case 97: goto L_0x01ec;
                case 99: goto L_0x019e;
                case 104: goto L_0x0178;
                case 108: goto L_0x014e;
                case 109: goto L_0x0115;
                case 113: goto L_0x00e0;
                case 115: goto L_0x009a;
                case 116: goto L_0x0068;
                case 118: goto L_0x0044;
                case 122: goto L_0x003b;
                default: goto L_0x003a;
            }
        L_0x003a:
            return r9
        L_0x003b:
            r9.close()
            r1 = r13
            r2 = r1
            r3 = r14
        L_0x0041:
            r4 = r3
            goto L_0x023b
        L_0x0044:
            float r4 = r0.mo12918n()
            boolean r5 = java.lang.Float.isNaN(r4)
            if (r5 == 0) goto L_0x005e
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            return r9
        L_0x005e:
            r5 = 118(0x76, float:1.65E-43)
            if (r12 != r5) goto L_0x0063
            float r4 = r4 + r3
        L_0x0063:
            r3 = r4
            r9.mo12804e(r1, r3)
            goto L_0x0041
        L_0x0068:
            float r5 = r1 * r6
            float r2 = r5 - r2
            float r6 = r6 * r3
            float r4 = r6 - r4
            float r5 = r0.mo12918n()
            float r6 = r0.mo12908d(r5)
            boolean r15 = java.lang.Float.isNaN(r6)
            if (r15 == 0) goto L_0x008d
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            return r9
        L_0x008d:
            r7 = 116(0x74, float:1.63E-43)
            if (r12 != r7) goto L_0x0093
            float r5 = r5 + r1
            float r6 = r6 + r3
        L_0x0093:
            r1 = r5
            r3 = r6
            r9.mo12799a(r2, r4, r1, r3)
            goto L_0x023b
        L_0x009a:
            float r5 = r1 * r6
            float r2 = r5 - r2
            float r6 = r6 * r3
            float r4 = r6 - r4
            float r5 = r0.mo12918n()
            float r6 = r0.mo12908d(r5)
            float r15 = r0.mo12908d(r6)
            float r16 = r0.mo12908d(r15)
            boolean r17 = java.lang.Float.isNaN(r16)
            if (r17 == 0) goto L_0x00c7
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            return r9
        L_0x00c7:
            r7 = 115(0x73, float:1.61E-43)
            if (r12 != r7) goto L_0x00d0
            float r15 = r15 + r1
            float r16 = r16 + r3
            float r5 = r5 + r1
            float r6 = r6 + r3
        L_0x00d0:
            r8 = r5
            r17 = r6
            r1 = r9
            r3 = r4
            r4 = r8
            r5 = r17
            r6 = r15
            r7 = r16
            r1.mo12801c(r2, r3, r4, r5, r6, r7)
            goto L_0x01e5
        L_0x00e0:
            float r2 = r0.mo12918n()
            float r4 = r0.mo12908d(r2)
            float r5 = r0.mo12908d(r4)
            float r6 = r0.mo12908d(r5)
            boolean r15 = java.lang.Float.isNaN(r6)
            if (r15 == 0) goto L_0x0106
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            return r9
        L_0x0106:
            r7 = 113(0x71, float:1.58E-43)
            if (r12 != r7) goto L_0x010e
            float r5 = r5 + r1
            float r6 = r6 + r3
            float r2 = r2 + r1
            float r4 = r4 + r3
        L_0x010e:
            r1 = r5
            r3 = r6
            r9.mo12799a(r2, r4, r1, r3)
            goto L_0x023b
        L_0x0115:
            float r2 = r0.mo12918n()
            float r4 = r0.mo12908d(r2)
            boolean r6 = java.lang.Float.isNaN(r4)
            if (r6 == 0) goto L_0x0133
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            return r9
        L_0x0133:
            if (r12 != r10) goto L_0x013d
            boolean r6 = r9.mo12808i()
            if (r6 != 0) goto L_0x013d
            float r2 = r2 + r1
            float r4 = r4 + r3
        L_0x013d:
            r1 = r2
            r3 = r4
            r9.mo12800b(r1, r3)
            if (r12 != r10) goto L_0x0145
            goto L_0x0147
        L_0x0145:
            r5 = 76
        L_0x0147:
            r2 = r1
            r13 = r2
            r4 = r3
            r14 = r4
            r12 = r5
            goto L_0x023b
        L_0x014e:
            float r2 = r0.mo12918n()
            float r4 = r0.mo12908d(r2)
            boolean r6 = java.lang.Float.isNaN(r4)
            if (r6 == 0) goto L_0x016c
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            return r9
        L_0x016c:
            if (r12 != r5) goto L_0x0170
            float r2 = r2 + r1
            float r4 = r4 + r3
        L_0x0170:
            r1 = r2
            r3 = r4
            r9.mo12804e(r1, r3)
            r2 = r1
            goto L_0x0041
        L_0x0178:
            float r2 = r0.mo12918n()
            boolean r5 = java.lang.Float.isNaN(r2)
            if (r5 == 0) goto L_0x0192
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            return r9
        L_0x0192:
            r5 = 104(0x68, float:1.46E-43)
            if (r12 != r5) goto L_0x0197
            float r2 = r2 + r1
        L_0x0197:
            r1 = r2
            r9.mo12804e(r1, r3)
            r2 = r1
            goto L_0x023b
        L_0x019e:
            float r2 = r0.mo12918n()
            float r4 = r0.mo12908d(r2)
            float r5 = r0.mo12908d(r4)
            float r6 = r0.mo12908d(r5)
            float r15 = r0.mo12908d(r6)
            float r16 = r0.mo12908d(r15)
            boolean r17 = java.lang.Float.isNaN(r16)
            if (r17 == 0) goto L_0x01cc
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            return r9
        L_0x01cc:
            r7 = 99
            if (r12 != r7) goto L_0x01d7
            float r15 = r15 + r1
            float r16 = r16 + r3
            float r2 = r2 + r1
            float r4 = r4 + r3
            float r5 = r5 + r1
            float r6 = r6 + r3
        L_0x01d7:
            r3 = r4
            r8 = r5
            r17 = r6
            r1 = r9
            r4 = r8
            r5 = r17
            r6 = r15
            r7 = r16
            r1.mo12801c(r2, r3, r4, r5, r6, r7)
        L_0x01e5:
            r2 = r8
            r1 = r15
            r3 = r16
            r4 = r17
            goto L_0x023b
        L_0x01ec:
            float r2 = r0.mo12918n()
            float r4 = r0.mo12908d(r2)
            float r5 = r0.mo12908d(r4)
            java.lang.Float r6 = java.lang.Float.valueOf(r5)
            java.lang.Boolean r6 = r0.mo12907c(r6)
            java.lang.Boolean r15 = r0.mo12907c(r6)
            float r10 = r0.mo12909e(r15)
            float r16 = r0.mo12908d(r10)
            boolean r17 = java.lang.Float.isNaN(r16)
            if (r17 != 0) goto L_0x0257
            int r17 = (r2 > r11 ? 1 : (r2 == r11 ? 0 : -1))
            if (r17 < 0) goto L_0x0257
            int r17 = (r4 > r11 ? 1 : (r4 == r11 ? 0 : -1))
            if (r17 >= 0) goto L_0x021b
            goto L_0x0257
        L_0x021b:
            r7 = 97
            if (r12 != r7) goto L_0x0222
            float r10 = r10 + r1
            float r16 = r16 + r3
        L_0x0222:
            boolean r6 = r6.booleanValue()
            boolean r7 = r15.booleanValue()
            r1 = r9
            r3 = r4
            r4 = r5
            r5 = r6
            r6 = r7
            r7 = r10
            r8 = r16
            r1.mo12803d(r2, r3, r4, r5, r6, r7, r8)
            r1 = r10
            r2 = r1
            r3 = r16
            goto L_0x0041
        L_0x023b:
            r0.mo12930z()
            boolean r5 = r0.mo12912h()
            if (r5 == 0) goto L_0x0245
            return r9
        L_0x0245:
            boolean r5 = r0.mo12913i()
            if (r5 == 0) goto L_0x0253
            java.lang.Integer r5 = r0.mo12916l()
            int r12 = r5.intValue()
        L_0x0253:
            r10 = 109(0x6d, float:1.53E-43)
            goto L_0x002c
        L_0x0257:
            java.lang.StringBuilder r0 = new java.lang.StringBuilder
            r0.<init>()
            r0.append(r8)
            char r1 = (char) r12
            r0.append(r1)
            r0.append(r7)
            return r9
        */
        throw new UnsupportedOperationException("Method not decompiled: com.caverock.androidsvg.SVGParser.m12910u0(java.lang.String):com.caverock.androidsvg.SVG$v");
    }

    /* renamed from: v0 */
    public static PreserveAspectRatio m12911v0(String str) throws SVGParseException {
        C1890g gVar = new C1890g(str);
        gVar.mo12904A();
        String r = gVar.mo12922r();
        if ("defer".equals(r)) {
            gVar.mo12904A();
            r = gVar.mo12922r();
        }
        PreserveAspectRatio.Alignment a = C1885b.m12984a(r);
        PreserveAspectRatio.Scale scale = null;
        gVar.mo12904A();
        if (!gVar.mo12912h()) {
            String r2 = gVar.mo12922r();
            r2.hashCode();
            if (r2.equals("meet")) {
                scale = PreserveAspectRatio.Scale.meet;
            } else if (r2.equals("slice")) {
                scale = PreserveAspectRatio.Scale.slice;
            } else {
                throw new SVGParseException("Invalid preserveAspectRatio definition: " + str);
            }
        }
        return new PreserveAspectRatio(a, scale);
    }

    /* renamed from: w0 */
    public static void m12912w0(SVG.C1856n0 n0Var, String str) throws SVGParseException {
        n0Var.f9218o = m12911v0(str);
    }

    /* renamed from: y0 */
    public static SVG.Style.RenderQuality m12913y0(String str) {
        str.hashCode();
        char c = 65535;
        switch (str.hashCode()) {
            case -933002398:
                if (str.equals("optimizeQuality")) {
                    c = 0;
                    break;
                }
                break;
            case 3005871:
                if (str.equals("auto")) {
                    c = 1;
                    break;
                }
                break;
            case 362741610:
                if (str.equals("optimizeSpeed")) {
                    c = 2;
                    break;
                }
                break;
        }
        switch (c) {
            case 0:
                return SVG.Style.RenderQuality.optimizeQuality;
            case 1:
                return SVG.Style.RenderQuality.auto;
            case 2:
                return SVG.Style.RenderQuality.optimizeSpeed;
            default:
                return null;
        }
    }

    /* renamed from: z0 */
    public static Set<String> m12914z0(String str) {
        C1890g gVar = new C1890g(str);
        HashSet hashSet = new HashSet();
        while (!gVar.mo12912h()) {
            String r = gVar.mo12922r();
            if (r.startsWith("http://www.w3.org/TR/SVG11/feature#")) {
                hashSet.add(r.substring(35));
            } else {
                hashSet.add("UNSUPPORTED");
            }
            gVar.mo12904A();
        }
        return hashSet;
    }

    /* renamed from: A */
    public final void mo12829A(SVG.C1835d dVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            switch (C1884a.f9310b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()]) {
                case 12:
                    dVar.f9165o = m12902o0(trim);
                    break;
                case 13:
                    dVar.f9166p = m12902o0(trim);
                    break;
                case 14:
                    SVG.C1857o o0 = m12902o0(trim);
                    dVar.f9167q = o0;
                    if (!o0.mo12793i()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <circle> element. r cannot be negative");
                    }
            }
        }
    }

    /* renamed from: B */
    public final void mo12830B(SVG.C1837e eVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            if (C1884a.f9310b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()] == 38) {
                if ("objectBoundingBox".equals(trim)) {
                    eVar.f9173p = Boolean.FALSE;
                } else if ("userSpaceOnUse".equals(trim)) {
                    eVar.f9173p = Boolean.TRUE;
                } else {
                    throw new SVGParseException("Invalid value for attribute clipPathUnits");
                }
            }
        }
    }

    /* renamed from: C */
    public final void mo12831C(SVG.C1838e0 e0Var, Attributes attributes) throws SVGParseException {
        HashSet hashSet;
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            switch (C1884a.f9310b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()]) {
                case 21:
                    e0Var.mo12777f(m12914z0(trim));
                    break;
                case 22:
                    e0Var.mo12781k(trim);
                    break;
                case 23:
                    e0Var.mo12779h(m12874F0(trim));
                    break;
                case 24:
                    e0Var.mo12780j(m12869A0(trim));
                    break;
                case 25:
                    List<String> i0 = m12896i0(trim);
                    if (i0 == null) {
                        hashSet = new HashSet(0);
                    }
                    e0Var.mo12776d(hashSet);
                    break;
            }
        }
    }

    /* renamed from: D */
    public final void mo12832D(SVG.C1848j0 j0Var, Attributes attributes) throws SVGParseException {
        int i = 0;
        while (i < attributes.getLength()) {
            String qName = attributes.getQName(i);
            if (qName.equals("id") || qName.equals("xml:id")) {
                j0Var.f9199c = attributes.getValue(i).trim();
                return;
            } else if (qName.equals("xml:space")) {
                String trim = attributes.getValue(i).trim();
                if ("default".equals(trim)) {
                    j0Var.f9200d = Boolean.FALSE;
                    return;
                } else if ("preserve".equals(trim)) {
                    j0Var.f9200d = Boolean.TRUE;
                    return;
                } else {
                    throw new SVGParseException("Invalid value for \"xml:space\" attribute: " + trim);
                }
            } else {
                i++;
            }
        }
    }

    /* renamed from: E */
    public final void mo12833E(SVG.C1845i iVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            switch (C1884a.f9310b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()]) {
                case 10:
                    SVG.C1857o o0 = m12902o0(trim);
                    iVar.f9191q = o0;
                    if (!o0.mo12793i()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <ellipse> element. rx cannot be negative");
                    }
                case 11:
                    SVG.C1857o o02 = m12902o0(trim);
                    iVar.f9192r = o02;
                    if (!o02.mo12793i()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <ellipse> element. ry cannot be negative");
                    }
                case 12:
                    iVar.f9189o = m12902o0(trim);
                    break;
                case 13:
                    iVar.f9190p = m12902o0(trim);
                    break;
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:34:0x008c, code lost:
        continue;
     */
    /* renamed from: F */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void mo12834F(com.caverock.androidsvg.SVG.C1847j r5, org.xml.sax.Attributes r6) throws com.caverock.androidsvg.SVGParseException {
        /*
            r4 = this;
            r0 = 0
        L_0x0001:
            int r1 = r6.getLength()
            if (r0 >= r1) goto L_0x0090
            java.lang.String r1 = r6.getValue(r0)
            java.lang.String r1 = r1.trim()
            int[] r2 = com.caverock.androidsvg.SVGParser.C1884a.f9310b
            java.lang.String r3 = r6.getLocalName(r0)
            com.caverock.androidsvg.SVGParser$SVGAttr r3 = com.caverock.androidsvg.SVGParser.SVGAttr.fromString(r3)
            int r3 = r3.ordinal()
            r2 = r2[r3]
            r3 = 6
            if (r2 == r3) goto L_0x0072
            switch(r2) {
                case 32: goto L_0x0050;
                case 33: goto L_0x0049;
                case 34: goto L_0x0026;
                default: goto L_0x0025;
            }
        L_0x0025:
            goto L_0x008c
        L_0x0026:
            com.caverock.androidsvg.SVG$GradientSpread r2 = com.caverock.androidsvg.SVG.GradientSpread.valueOf(r1)     // Catch:{ IllegalArgumentException -> 0x002d }
            r5.f9197k = r2     // Catch:{ IllegalArgumentException -> 0x002d }
            goto L_0x008c
        L_0x002d:
            com.caverock.androidsvg.SVGParseException r5 = new com.caverock.androidsvg.SVGParseException
            java.lang.StringBuilder r6 = new java.lang.StringBuilder
            r6.<init>()
            java.lang.String r0 = "Invalid spreadMethod attribute. \""
            r6.append(r0)
            r6.append(r1)
            java.lang.String r0 = "\" is not a valid value."
            r6.append(r0)
            java.lang.String r6 = r6.toString()
            r5.<init>(r6)
            throw r5
        L_0x0049:
            android.graphics.Matrix r1 = r4.mo12839J0(r1)
            r5.f9196j = r1
            goto L_0x008c
        L_0x0050:
            java.lang.String r2 = "objectBoundingBox"
            boolean r2 = r2.equals(r1)
            if (r2 == 0) goto L_0x005d
            java.lang.Boolean r1 = java.lang.Boolean.FALSE
            r5.f9195i = r1
            goto L_0x008c
        L_0x005d:
            java.lang.String r2 = "userSpaceOnUse"
            boolean r1 = r2.equals(r1)
            if (r1 == 0) goto L_0x006a
            java.lang.Boolean r1 = java.lang.Boolean.TRUE
            r5.f9195i = r1
            goto L_0x008c
        L_0x006a:
            com.caverock.androidsvg.SVGParseException r5 = new com.caverock.androidsvg.SVGParseException
            java.lang.String r6 = "Invalid value for attribute gradientUnits"
            r5.<init>(r6)
            throw r5
        L_0x0072:
            java.lang.String r2 = r6.getURI(r0)
            java.lang.String r3 = ""
            boolean r2 = r3.equals(r2)
            if (r2 != 0) goto L_0x008a
            java.lang.String r2 = r6.getURI(r0)
            java.lang.String r3 = "http://www.w3.org/1999/xlink"
            boolean r2 = r3.equals(r2)
            if (r2 == 0) goto L_0x008c
        L_0x008a:
            r5.f9198l = r1
        L_0x008c:
            int r0 = r0 + 1
            goto L_0x0001
        L_0x0090:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.caverock.androidsvg.SVGParser.mo12834F(com.caverock.androidsvg.SVG$j, org.xml.sax.Attributes):void");
    }

    /* renamed from: G */
    public final void mo12835G(SVG.C1855n nVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            int i2 = C1884a.f9310b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()];
            if (i2 == 1) {
                nVar.f9213q = m12902o0(trim);
            } else if (i2 == 2) {
                nVar.f9214r = m12902o0(trim);
            } else if (i2 == 3) {
                SVG.C1857o o0 = m12902o0(trim);
                nVar.f9215s = o0;
                if (o0.mo12793i()) {
                    throw new SVGParseException("Invalid <use> element. width cannot be negative");
                }
            } else if (i2 == 4) {
                SVG.C1857o o02 = m12902o0(trim);
                nVar.f9216t = o02;
                if (o02.mo12793i()) {
                    throw new SVGParseException("Invalid <use> element. height cannot be negative");
                }
            } else if (i2 != 6) {
                if (i2 == 7) {
                    m12912w0(nVar, trim);
                }
            } else if ("".equals(attributes.getURI(i)) || "http://www.w3.org/1999/xlink".equals(attributes.getURI(i))) {
                nVar.f9212p = trim;
            }
        }
    }

    /* renamed from: H */
    public final void mo12836H(SVG.C1859p pVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            switch (C1884a.f9310b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()]) {
                case 15:
                    pVar.f9226o = m12902o0(trim);
                    break;
                case 16:
                    pVar.f9227p = m12902o0(trim);
                    break;
                case 17:
                    pVar.f9228q = m12902o0(trim);
                    break;
                case 18:
                    pVar.f9229r = m12902o0(trim);
                    break;
            }
        }
    }

    /* renamed from: I */
    public final void mo12837I(SVG.C1850k0 k0Var, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            switch (C1884a.f9310b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()]) {
                case 15:
                    k0Var.f9205m = m12902o0(trim);
                    break;
                case 16:
                    k0Var.f9206n = m12902o0(trim);
                    break;
                case 17:
                    k0Var.f9207o = m12902o0(trim);
                    break;
                case 18:
                    k0Var.f9208p = m12902o0(trim);
                    break;
            }
        }
    }

    /* renamed from: J */
    public final void mo12838J(SVG.C1861q qVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            switch (C1884a.f9310b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()]) {
                case 26:
                    qVar.f9232r = m12902o0(trim);
                    break;
                case 27:
                    qVar.f9233s = m12902o0(trim);
                    break;
                case 28:
                    SVG.C1857o o0 = m12902o0(trim);
                    qVar.f9234t = o0;
                    if (!o0.mo12793i()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <marker> element. markerWidth cannot be negative");
                    }
                case 29:
                    SVG.C1857o o02 = m12902o0(trim);
                    qVar.f9235u = o02;
                    if (!o02.mo12793i()) {
                        break;
                    } else {
                        throw new SVGParseException("Invalid <marker> element. markerHeight cannot be negative");
                    }
                case 30:
                    if ("strokeWidth".equals(trim)) {
                        qVar.f9231q = false;
                        break;
                    } else if ("userSpaceOnUse".equals(trim)) {
                        qVar.f9231q = true;
                        break;
                    } else {
                        throw new SVGParseException("Invalid value for attribute markerUnits");
                    }
                case 31:
                    if (!"auto".equals(trim)) {
                        qVar.f9236v = Float.valueOf(m12892f0(trim));
                        break;
                    } else {
                        qVar.f9236v = Float.valueOf(Float.NaN);
                        break;
                    }
            }
        }
    }

    /* renamed from: J0 */
    public final Matrix mo12839J0(String str) throws SVGParseException {
        String str2 = str;
        Matrix matrix = new Matrix();
        C1890g gVar = new C1890g(str2);
        gVar.mo12904A();
        while (!gVar.mo12912h()) {
            String o = gVar.mo12919o();
            if (o != null) {
                char c = 65535;
                switch (o.hashCode()) {
                    case -1081239615:
                        if (o.equals("matrix")) {
                            c = 0;
                            break;
                        }
                        break;
                    case -925180581:
                        if (o.equals("rotate")) {
                            c = 1;
                            break;
                        }
                        break;
                    case 109250890:
                        if (o.equals("scale")) {
                            c = 2;
                            break;
                        }
                        break;
                    case 109493390:
                        if (o.equals("skewX")) {
                            c = 3;
                            break;
                        }
                        break;
                    case 109493391:
                        if (o.equals("skewY")) {
                            c = 4;
                            break;
                        }
                        break;
                    case 1052832078:
                        if (o.equals("translate")) {
                            c = 5;
                            break;
                        }
                        break;
                }
                switch (c) {
                    case 0:
                        gVar.mo12904A();
                        float n = gVar.mo12918n();
                        gVar.mo12930z();
                        float n2 = gVar.mo12918n();
                        gVar.mo12930z();
                        float n3 = gVar.mo12918n();
                        gVar.mo12930z();
                        float n4 = gVar.mo12918n();
                        gVar.mo12930z();
                        float n5 = gVar.mo12918n();
                        gVar.mo12930z();
                        float n6 = gVar.mo12918n();
                        gVar.mo12904A();
                        if (!Float.isNaN(n6) && gVar.mo12910f(')')) {
                            Matrix matrix2 = new Matrix();
                            matrix2.setValues(new float[]{n, n3, n5, n2, n4, n6, 0.0f, 0.0f, 1.0f});
                            matrix.preConcat(matrix2);
                            break;
                        } else {
                            throw new SVGParseException("Invalid transform list: " + str2);
                        }
                        break;
                    case 1:
                        gVar.mo12904A();
                        float n7 = gVar.mo12918n();
                        float x = gVar.mo12928x();
                        float x2 = gVar.mo12928x();
                        gVar.mo12904A();
                        if (Float.isNaN(n7) || !gVar.mo12910f(')')) {
                            throw new SVGParseException("Invalid transform list: " + str2);
                        } else if (Float.isNaN(x)) {
                            matrix.preRotate(n7);
                            break;
                        } else if (!Float.isNaN(x2)) {
                            matrix.preRotate(n7, x, x2);
                            break;
                        } else {
                            throw new SVGParseException("Invalid transform list: " + str2);
                        }
                    case 2:
                        gVar.mo12904A();
                        float n8 = gVar.mo12918n();
                        float x3 = gVar.mo12928x();
                        gVar.mo12904A();
                        if (!Float.isNaN(n8) && gVar.mo12910f(')')) {
                            if (!Float.isNaN(x3)) {
                                matrix.preScale(n8, x3);
                                break;
                            } else {
                                matrix.preScale(n8, n8);
                                break;
                            }
                        } else {
                            throw new SVGParseException("Invalid transform list: " + str2);
                        }
                        break;
                    case 3:
                        gVar.mo12904A();
                        float n9 = gVar.mo12918n();
                        gVar.mo12904A();
                        if (!Float.isNaN(n9) && gVar.mo12910f(')')) {
                            matrix.preSkew((float) Math.tan(Math.toRadians((double) n9)), Utils.FLOAT_EPSILON);
                            break;
                        } else {
                            throw new SVGParseException("Invalid transform list: " + str2);
                        }
                        break;
                    case 4:
                        gVar.mo12904A();
                        float n10 = gVar.mo12918n();
                        gVar.mo12904A();
                        if (!Float.isNaN(n10) && gVar.mo12910f(')')) {
                            matrix.preSkew(Utils.FLOAT_EPSILON, (float) Math.tan(Math.toRadians((double) n10)));
                            break;
                        } else {
                            throw new SVGParseException("Invalid transform list: " + str2);
                        }
                    case 5:
                        gVar.mo12904A();
                        float n11 = gVar.mo12918n();
                        float x4 = gVar.mo12928x();
                        gVar.mo12904A();
                        if (!Float.isNaN(n11) && gVar.mo12910f(')')) {
                            if (!Float.isNaN(x4)) {
                                matrix.preTranslate(n11, x4);
                                break;
                            } else {
                                matrix.preTranslate(n11, Utils.FLOAT_EPSILON);
                                break;
                            }
                        } else {
                            throw new SVGParseException("Invalid transform list: " + str2);
                        }
                        break;
                    default:
                        throw new SVGParseException("Invalid transform list fn: " + o + ")");
                }
                if (gVar.mo12912h()) {
                    return matrix;
                }
                gVar.mo12930z();
            } else {
                throw new SVGParseException("Bad transform function encountered in transform list: " + str2);
            }
        }
        return matrix;
    }

    /* renamed from: K */
    public final void mo12840K(SVG.C1863r rVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            int i2 = C1884a.f9310b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()];
            if (i2 == 1) {
                rVar.f9239q = m12902o0(trim);
            } else if (i2 == 2) {
                rVar.f9240r = m12902o0(trim);
            } else if (i2 == 3) {
                SVG.C1857o o0 = m12902o0(trim);
                rVar.f9241s = o0;
                if (o0.mo12793i()) {
                    throw new SVGParseException("Invalid <mask> element. width cannot be negative");
                }
            } else if (i2 == 4) {
                SVG.C1857o o02 = m12902o0(trim);
                rVar.f9242t = o02;
                if (o02.mo12793i()) {
                    throw new SVGParseException("Invalid <mask> element. height cannot be negative");
                }
            } else if (i2 != 43) {
                if (i2 != 44) {
                    continue;
                } else if ("objectBoundingBox".equals(trim)) {
                    rVar.f9238p = Boolean.FALSE;
                } else if ("userSpaceOnUse".equals(trim)) {
                    rVar.f9238p = Boolean.TRUE;
                } else {
                    throw new SVGParseException("Invalid value for attribute maskContentUnits");
                }
            } else if ("objectBoundingBox".equals(trim)) {
                rVar.f9237o = Boolean.FALSE;
            } else if ("userSpaceOnUse".equals(trim)) {
                rVar.f9237o = Boolean.TRUE;
            } else {
                throw new SVGParseException("Invalid value for attribute maskUnits");
            }
        }
    }

    /* renamed from: K0 */
    public final void mo12841K0(InputStream inputStream) throws SVGParseException {
        try {
            SAXParserFactory newInstance = SAXParserFactory.newInstance();
            newInstance.setFeature("http://xml.org/sax/features/external-general-entities", false);
            newInstance.setFeature("http://xml.org/sax/features/external-parameter-entities", false);
            XMLReader xMLReader = newInstance.newSAXParser().getXMLReader();
            C1889f fVar = new C1889f(this, (C1884a) null);
            xMLReader.setContentHandler(fVar);
            xMLReader.setProperty("http://xml.org/sax/properties/lexical-handler", fVar);
            xMLReader.parse(new InputSource(inputStream));
        } catch (ParserConfigurationException e) {
            throw new SVGParseException("XML parser problem", e);
        } catch (SAXException e2) {
            throw new SVGParseException("SVG parse error", e2);
        } catch (IOException e3) {
            throw new SVGParseException("Stream error", e3);
        }
    }

    /* renamed from: L */
    public final void mo12842L(SVG.C1869u uVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            int i2 = C1884a.f9310b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()];
            if (i2 == 8) {
                uVar.f9248o = m12910u0(trim);
            } else if (i2 != 9) {
                continue;
            } else {
                Float valueOf = Float.valueOf(m12892f0(trim));
                uVar.f9249p = valueOf;
                if (valueOf.floatValue() < Utils.FLOAT_EPSILON) {
                    throw new SVGParseException("Invalid <path> element. pathLength cannot be negative");
                }
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:44:0x0102, code lost:
        r9 = move-exception;
     */
    /* JADX WARNING: Code restructure failed: missing block: B:46:0x010a, code lost:
        throw new com.caverock.androidsvg.SVGParseException("XML parser problem", r9);
     */
    /* JADX WARNING: Code restructure failed: missing block: B:59:?, code lost:
        return;
     */
    /* JADX WARNING: Failed to process nested try/catch */
    /* JADX WARNING: Removed duplicated region for block: B:44:0x0102 A[ExcHandler: XmlPullParserException (r9v1 'e' org.xmlpull.v1.XmlPullParserException A[CUSTOM_DECLARE]), Splitter:B:0:0x0000] */
    /* renamed from: L0 */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void mo12843L0(java.io.InputStream r9, boolean r10) throws com.caverock.androidsvg.SVGParseException {
        /*
            r8 = this;
            org.xmlpull.v1.XmlPullParser r0 = android.util.Xml.newPullParser()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            com.caverock.androidsvg.SVGParser$h r1 = new com.caverock.androidsvg.SVGParser$h     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            r1.<init>(r0)     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            java.lang.String r2 = "http://xmlpull.org/v1/doc/features.html#process-docdecl"
            r3 = 0
            r0.setFeature(r2, r3)     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            java.lang.String r2 = "http://xmlpull.org/v1/doc/features.html#process-namespaces"
            r4 = 1
            r0.setFeature(r2, r4)     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            r2 = 0
            r0.setInput(r9, r2)     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            int r2 = r0.getEventType()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
        L_0x001d:
            if (r2 == r4) goto L_0x00f5
            if (r2 == 0) goto L_0x00ec
            r5 = 8
            if (r2 == r5) goto L_0x00c6
            r5 = 10
            if (r2 == r5) goto L_0x00a9
            r5 = 58
            r6 = 2
            if (r2 == r6) goto L_0x007d
            r7 = 3
            if (r2 == r7) goto L_0x0051
            r5 = 4
            if (r2 == r5) goto L_0x0042
            r5 = 5
            if (r2 == r5) goto L_0x0039
            goto L_0x00ef
        L_0x0039:
            java.lang.String r2 = r0.getText()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            r8.mo12871c1(r2)     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            goto L_0x00ef
        L_0x0042:
            int[] r2 = new int[r6]     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            char[] r5 = r0.getTextCharacters(r2)     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            r6 = r2[r3]     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            r2 = r2[r4]     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            r8.mo12873e1(r5, r6, r2)     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            goto L_0x00ef
        L_0x0051:
            java.lang.String r2 = r0.getName()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            java.lang.String r6 = r0.getPrefix()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            if (r6 == 0) goto L_0x0071
            java.lang.StringBuilder r6 = new java.lang.StringBuilder     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            r6.<init>()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            java.lang.String r7 = r0.getPrefix()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            r6.append(r7)     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            r6.append(r5)     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            r6.append(r2)     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            java.lang.String r2 = r6.toString()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
        L_0x0071:
            java.lang.String r5 = r0.getNamespace()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            java.lang.String r6 = r0.getName()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            r8.mo12888p(r5, r6, r2)     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            goto L_0x00ef
        L_0x007d:
            java.lang.String r2 = r0.getName()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            java.lang.String r6 = r0.getPrefix()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            if (r6 == 0) goto L_0x009d
            java.lang.StringBuilder r6 = new java.lang.StringBuilder     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            r6.<init>()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            java.lang.String r7 = r0.getPrefix()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            r6.append(r7)     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            r6.append(r5)     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            r6.append(r2)     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            java.lang.String r2 = r6.toString()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
        L_0x009d:
            java.lang.String r5 = r0.getNamespace()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            java.lang.String r6 = r0.getName()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            r8.mo12864X0(r5, r6, r2, r1)     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            goto L_0x00ef
        L_0x00a9:
            if (r10 == 0) goto L_0x00ef
            com.caverock.androidsvg.SVG r2 = r8.f9278a     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            com.caverock.androidsvg.SVG$d0 r2 = r2.mo12752l()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            if (r2 != 0) goto L_0x00ef
            java.lang.String r2 = r0.getText()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            java.lang.String r5 = "<!ENTITY "
            boolean r2 = r2.contains(r5)     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            if (r2 == 0) goto L_0x00ef
            r9.reset()     // Catch:{ IOException -> 0x00c5, XmlPullParserException -> 0x0102 }
            r8.mo12841K0(r9)     // Catch:{ IOException -> 0x00c5, XmlPullParserException -> 0x0102 }
        L_0x00c5:
            return
        L_0x00c6:
            java.lang.StringBuilder r2 = new java.lang.StringBuilder     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            r2.<init>()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            java.lang.String r5 = "PROC INSTR: "
            r2.append(r5)     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            java.lang.String r5 = r0.getText()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            r2.append(r5)     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            com.caverock.androidsvg.SVGParser$g r2 = new com.caverock.androidsvg.SVGParser$g     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            java.lang.String r5 = r0.getText()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            r2.<init>(r5)     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            java.lang.String r5 = r2.mo12922r()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            java.util.Map r2 = r8.mo12895x0(r2)     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            r8.mo12890r(r5, r2)     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            goto L_0x00ef
        L_0x00ec:
            r8.mo12862W0()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
        L_0x00ef:
            int r2 = r0.nextToken()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            goto L_0x001d
        L_0x00f5:
            r8.mo12887o()     // Catch:{ XmlPullParserException -> 0x0102, IOException -> 0x00f9 }
            return
        L_0x00f9:
            r9 = move-exception
            com.caverock.androidsvg.SVGParseException r10 = new com.caverock.androidsvg.SVGParseException
            java.lang.String r0 = "Stream error"
            r10.<init>(r0, r9)
            throw r10
        L_0x0102:
            r9 = move-exception
            com.caverock.androidsvg.SVGParseException r10 = new com.caverock.androidsvg.SVGParseException
            java.lang.String r0 = "XML parser problem"
            r10.<init>(r0, r9)
            throw r10
        */
        throw new UnsupportedOperationException("Method not decompiled: com.caverock.androidsvg.SVGParser.mo12843L0(java.io.InputStream, boolean):void");
    }

    /* JADX WARNING: Code restructure failed: missing block: B:63:0x00cf, code lost:
        continue;
     */
    /* renamed from: M */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void mo12844M(com.caverock.androidsvg.SVG.C1875x r6, org.xml.sax.Attributes r7) throws com.caverock.androidsvg.SVGParseException {
        /*
            r5 = this;
            r0 = 0
        L_0x0001:
            int r1 = r7.getLength()
            if (r0 >= r1) goto L_0x00d3
            java.lang.String r1 = r7.getValue(r0)
            java.lang.String r1 = r1.trim()
            int[] r2 = com.caverock.androidsvg.SVGParser.C1884a.f9310b
            java.lang.String r3 = r7.getLocalName(r0)
            com.caverock.androidsvg.SVGParser$SVGAttr r3 = com.caverock.androidsvg.SVGParser.SVGAttr.fromString(r3)
            int r3 = r3.ordinal()
            r2 = r2[r3]
            r3 = 1
            if (r2 == r3) goto L_0x00c9
            r3 = 2
            if (r2 == r3) goto L_0x00c2
            r3 = 3
            if (r2 == r3) goto L_0x00ad
            r3 = 4
            if (r2 == r3) goto L_0x0098
            r3 = 6
            if (r2 == r3) goto L_0x007d
            java.lang.String r3 = "userSpaceOnUse"
            java.lang.String r4 = "objectBoundingBox"
            switch(r2) {
                case 40: goto L_0x005f;
                case 41: goto L_0x003f;
                case 42: goto L_0x0037;
                default: goto L_0x0035;
            }
        L_0x0035:
            goto L_0x00cf
        L_0x0037:
            android.graphics.Matrix r1 = r5.mo12839J0(r1)
            r6.f9257s = r1
            goto L_0x00cf
        L_0x003f:
            boolean r2 = r4.equals(r1)
            if (r2 == 0) goto L_0x004b
            java.lang.Boolean r1 = java.lang.Boolean.FALSE
            r6.f9256r = r1
            goto L_0x00cf
        L_0x004b:
            boolean r1 = r3.equals(r1)
            if (r1 == 0) goto L_0x0057
            java.lang.Boolean r1 = java.lang.Boolean.TRUE
            r6.f9256r = r1
            goto L_0x00cf
        L_0x0057:
            com.caverock.androidsvg.SVGParseException r6 = new com.caverock.androidsvg.SVGParseException
            java.lang.String r7 = "Invalid value for attribute patternContentUnits"
            r6.<init>(r7)
            throw r6
        L_0x005f:
            boolean r2 = r4.equals(r1)
            if (r2 == 0) goto L_0x006a
            java.lang.Boolean r1 = java.lang.Boolean.FALSE
            r6.f9255q = r1
            goto L_0x00cf
        L_0x006a:
            boolean r1 = r3.equals(r1)
            if (r1 == 0) goto L_0x0075
            java.lang.Boolean r1 = java.lang.Boolean.TRUE
            r6.f9255q = r1
            goto L_0x00cf
        L_0x0075:
            com.caverock.androidsvg.SVGParseException r6 = new com.caverock.androidsvg.SVGParseException
            java.lang.String r7 = "Invalid value for attribute patternUnits"
            r6.<init>(r7)
            throw r6
        L_0x007d:
            java.lang.String r2 = r7.getURI(r0)
            java.lang.String r3 = ""
            boolean r2 = r3.equals(r2)
            if (r2 != 0) goto L_0x0095
            java.lang.String r2 = r7.getURI(r0)
            java.lang.String r3 = "http://www.w3.org/1999/xlink"
            boolean r2 = r3.equals(r2)
            if (r2 == 0) goto L_0x00cf
        L_0x0095:
            r6.f9262x = r1
            goto L_0x00cf
        L_0x0098:
            com.caverock.androidsvg.SVG$o r1 = m12902o0(r1)
            r6.f9261w = r1
            boolean r1 = r1.mo12793i()
            if (r1 != 0) goto L_0x00a5
            goto L_0x00cf
        L_0x00a5:
            com.caverock.androidsvg.SVGParseException r6 = new com.caverock.androidsvg.SVGParseException
            java.lang.String r7 = "Invalid <pattern> element. height cannot be negative"
            r6.<init>(r7)
            throw r6
        L_0x00ad:
            com.caverock.androidsvg.SVG$o r1 = m12902o0(r1)
            r6.f9260v = r1
            boolean r1 = r1.mo12793i()
            if (r1 != 0) goto L_0x00ba
            goto L_0x00cf
        L_0x00ba:
            com.caverock.androidsvg.SVGParseException r6 = new com.caverock.androidsvg.SVGParseException
            java.lang.String r7 = "Invalid <pattern> element. width cannot be negative"
            r6.<init>(r7)
            throw r6
        L_0x00c2:
            com.caverock.androidsvg.SVG$o r1 = m12902o0(r1)
            r6.f9259u = r1
            goto L_0x00cf
        L_0x00c9:
            com.caverock.androidsvg.SVG$o r1 = m12902o0(r1)
            r6.f9258t = r1
        L_0x00cf:
            int r0 = r0 + 1
            goto L_0x0001
        L_0x00d3:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.caverock.androidsvg.SVGParser.mo12844M(com.caverock.androidsvg.SVG$x, org.xml.sax.Attributes):void");
    }

    /* renamed from: N */
    public final void mo12845N(SVG.C1877y yVar, Attributes attributes, String str) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            if (SVGAttr.fromString(attributes.getLocalName(i)) == SVGAttr.points) {
                C1890g gVar = new C1890g(attributes.getValue(i));
                ArrayList<Float> arrayList = new ArrayList<>();
                gVar.mo12904A();
                while (!gVar.mo12912h()) {
                    float n = gVar.mo12918n();
                    if (!Float.isNaN(n)) {
                        gVar.mo12930z();
                        float n2 = gVar.mo12918n();
                        if (!Float.isNaN(n2)) {
                            gVar.mo12930z();
                            arrayList.add(Float.valueOf(n));
                            arrayList.add(Float.valueOf(n2));
                        } else {
                            throw new SVGParseException("Invalid <" + str + "> points attribute. There should be an even number of coordinates.");
                        }
                    } else {
                        throw new SVGParseException("Invalid <" + str + "> points attribute. Non-coordinate content found in list.");
                    }
                }
                yVar.f9266o = new float[arrayList.size()];
                int i2 = 0;
                for (Float floatValue : arrayList) {
                    yVar.f9266o[i2] = floatValue.floatValue();
                    i2++;
                }
            }
        }
    }

    /* JADX WARNING: Code restructure failed: missing block: B:24:0x005b, code lost:
        continue;
     */
    /* renamed from: O */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    public final void mo12846O(com.caverock.androidsvg.SVG.C1858o0 r5, org.xml.sax.Attributes r6) throws com.caverock.androidsvg.SVGParseException {
        /*
            r4 = this;
            r0 = 0
        L_0x0001:
            int r1 = r6.getLength()
            if (r0 >= r1) goto L_0x005e
            java.lang.String r1 = r6.getValue(r0)
            java.lang.String r1 = r1.trim()
            int[] r2 = com.caverock.androidsvg.SVGParser.C1884a.f9310b
            java.lang.String r3 = r6.getLocalName(r0)
            com.caverock.androidsvg.SVGParser$SVGAttr r3 = com.caverock.androidsvg.SVGParser.SVGAttr.fromString(r3)
            int r3 = r3.ordinal()
            r2 = r2[r3]
            r3 = 35
            if (r2 == r3) goto L_0x0055
            r3 = 36
            if (r2 == r3) goto L_0x004e
            switch(r2) {
                case 12: goto L_0x0047;
                case 13: goto L_0x0040;
                case 14: goto L_0x002b;
                default: goto L_0x002a;
            }
        L_0x002a:
            goto L_0x005b
        L_0x002b:
            com.caverock.androidsvg.SVG$o r1 = m12902o0(r1)
            r5.f9223o = r1
            boolean r1 = r1.mo12793i()
            if (r1 != 0) goto L_0x0038
            goto L_0x005b
        L_0x0038:
            com.caverock.androidsvg.SVGParseException r5 = new com.caverock.androidsvg.SVGParseException
            java.lang.String r6 = "Invalid <radialGradient> element. r cannot be negative"
            r5.<init>(r6)
            throw r5
        L_0x0040:
            com.caverock.androidsvg.SVG$o r1 = m12902o0(r1)
            r5.f9222n = r1
            goto L_0x005b
        L_0x0047:
            com.caverock.androidsvg.SVG$o r1 = m12902o0(r1)
            r5.f9221m = r1
            goto L_0x005b
        L_0x004e:
            com.caverock.androidsvg.SVG$o r1 = m12902o0(r1)
            r5.f9225q = r1
            goto L_0x005b
        L_0x0055:
            com.caverock.androidsvg.SVG$o r1 = m12902o0(r1)
            r5.f9224p = r1
        L_0x005b:
            int r0 = r0 + 1
            goto L_0x0001
        L_0x005e:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.caverock.androidsvg.SVGParser.mo12846O(com.caverock.androidsvg.SVG$o0, org.xml.sax.Attributes):void");
    }

    /* renamed from: O0 */
    public final void mo12847O0(Attributes attributes) throws SVGParseException {
        mo12883l("<path>", new Object[0]);
        if (this.f9279b != null) {
            SVG.C1869u uVar = new SVG.C1869u();
            uVar.f9210a = this.f9278a;
            uVar.f9211b = this.f9279b;
            mo12832D(uVar, attributes);
            mo12854S(uVar, attributes);
            mo12861W(uVar, attributes);
            mo12831C(uVar, attributes);
            mo12842L(uVar, attributes);
            this.f9279b.mo12773i(uVar);
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: P */
    public final void mo12848P(SVG.C1827a0 a0Var, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            int i2 = C1884a.f9310b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()];
            if (i2 == 1) {
                a0Var.f9143o = m12902o0(trim);
            } else if (i2 == 2) {
                a0Var.f9144p = m12902o0(trim);
            } else if (i2 == 3) {
                SVG.C1857o o0 = m12902o0(trim);
                a0Var.f9145q = o0;
                if (o0.mo12793i()) {
                    throw new SVGParseException("Invalid <rect> element. width cannot be negative");
                }
            } else if (i2 == 4) {
                SVG.C1857o o02 = m12902o0(trim);
                a0Var.f9146r = o02;
                if (o02.mo12793i()) {
                    throw new SVGParseException("Invalid <rect> element. height cannot be negative");
                }
            } else if (i2 == 10) {
                SVG.C1857o o03 = m12902o0(trim);
                a0Var.f9147s = o03;
                if (o03.mo12793i()) {
                    throw new SVGParseException("Invalid <rect> element. rx cannot be negative");
                }
            } else if (i2 != 11) {
                continue;
            } else {
                SVG.C1857o o04 = m12902o0(trim);
                a0Var.f9148t = o04;
                if (o04.mo12793i()) {
                    throw new SVGParseException("Invalid <rect> element. ry cannot be negative");
                }
            }
        }
    }

    /* renamed from: P0 */
    public final void mo12849P0(Attributes attributes) throws SVGParseException {
        mo12883l("<pattern>", new Object[0]);
        if (this.f9279b != null) {
            SVG.C1875x xVar = new SVG.C1875x();
            xVar.f9210a = this.f9278a;
            xVar.f9211b = this.f9279b;
            mo12832D(xVar, attributes);
            mo12854S(xVar, attributes);
            mo12831C(xVar, attributes);
            mo12865Y(xVar, attributes);
            mo12844M(xVar, attributes);
            this.f9279b.mo12773i(xVar);
            this.f9279b = xVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: Q */
    public final void mo12850Q(SVG.C1836d0 d0Var, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            int i2 = C1884a.f9310b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()];
            if (i2 == 1) {
                d0Var.f9168q = m12902o0(trim);
            } else if (i2 == 2) {
                d0Var.f9169r = m12902o0(trim);
            } else if (i2 == 3) {
                SVG.C1857o o0 = m12902o0(trim);
                d0Var.f9170s = o0;
                if (o0.mo12793i()) {
                    throw new SVGParseException("Invalid <svg> element. width cannot be negative");
                }
            } else if (i2 == 4) {
                SVG.C1857o o02 = m12902o0(trim);
                d0Var.f9171t = o02;
                if (o02.mo12793i()) {
                    throw new SVGParseException("Invalid <svg> element. height cannot be negative");
                }
            } else if (i2 == 5) {
                d0Var.f9172u = trim;
            }
        }
    }

    /* renamed from: Q0 */
    public final void mo12851Q0(Attributes attributes) throws SVGParseException {
        mo12883l("<polygon>", new Object[0]);
        if (this.f9279b != null) {
            SVG.C1879z zVar = new SVG.C1879z();
            zVar.f9210a = this.f9278a;
            zVar.f9211b = this.f9279b;
            mo12832D(zVar, attributes);
            mo12854S(zVar, attributes);
            mo12861W(zVar, attributes);
            mo12831C(zVar, attributes);
            mo12845N(zVar, attributes, "polygon");
            this.f9279b.mo12773i(zVar);
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: R */
    public final void mo12852R(SVG.C1833c0 c0Var, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            if (C1884a.f9310b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()] == 37) {
                c0Var.f9164h = mo12886n0(trim);
            }
        }
    }

    /* renamed from: R0 */
    public final void mo12853R0(Attributes attributes) throws SVGParseException {
        mo12883l("<polyline>", new Object[0]);
        if (this.f9279b != null) {
            SVG.C1877y yVar = new SVG.C1877y();
            yVar.f9210a = this.f9278a;
            yVar.f9211b = this.f9279b;
            mo12832D(yVar, attributes);
            mo12854S(yVar, attributes);
            mo12861W(yVar, attributes);
            mo12831C(yVar, attributes);
            mo12845N(yVar, attributes, "polyline");
            this.f9279b.mo12773i(yVar);
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: S */
    public final void mo12854S(SVG.C1848j0 j0Var, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            if (trim.length() != 0) {
                int i2 = C1884a.f9310b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()];
                if (i2 == 45) {
                    m12873E0(j0Var, trim);
                } else if (i2 != 46) {
                    if (j0Var.f9201e == null) {
                        j0Var.f9201e = new SVG.Style();
                    }
                    m12880S0(j0Var.f9201e, attributes.getLocalName(i), attributes.getValue(i).trim());
                } else {
                    j0Var.f9203g = CSSParser.m12671f(trim);
                }
            }
        }
    }

    /* renamed from: T */
    public final void mo12855T(SVG.C1866s0 s0Var, Attributes attributes) {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            if (C1884a.f9310b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()] == 6 && ("".equals(attributes.getURI(i)) || "http://www.w3.org/1999/xlink".equals(attributes.getURI(i)))) {
                s0Var.f9243o = trim;
            }
        }
    }

    /* renamed from: T0 */
    public final void mo12856T0(Attributes attributes) throws SVGParseException {
        mo12883l("<radialGradient>", new Object[0]);
        if (this.f9279b != null) {
            SVG.C1858o0 o0Var = new SVG.C1858o0();
            o0Var.f9210a = this.f9278a;
            o0Var.f9211b = this.f9279b;
            mo12832D(o0Var, attributes);
            mo12854S(o0Var, attributes);
            mo12834F(o0Var, attributes);
            mo12846O(o0Var, attributes);
            this.f9279b.mo12773i(o0Var);
            this.f9279b = o0Var;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: U */
    public final void mo12857U(SVG.C1876x0 x0Var, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            int i2 = C1884a.f9310b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()];
            if (i2 != 6) {
                if (i2 == 39) {
                    x0Var.f9264p = m12902o0(trim);
                }
            } else if ("".equals(attributes.getURI(i)) || "http://www.w3.org/1999/xlink".equals(attributes.getURI(i))) {
                x0Var.f9263o = trim;
            }
        }
    }

    /* renamed from: U0 */
    public final void mo12858U0(Attributes attributes) throws SVGParseException {
        mo12883l("<rect>", new Object[0]);
        if (this.f9279b != null) {
            SVG.C1827a0 a0Var = new SVG.C1827a0();
            a0Var.f9210a = this.f9278a;
            a0Var.f9211b = this.f9279b;
            mo12832D(a0Var, attributes);
            mo12854S(a0Var, attributes);
            mo12861W(a0Var, attributes);
            mo12831C(a0Var, attributes);
            mo12848P(a0Var, attributes);
            this.f9279b.mo12773i(a0Var);
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: V */
    public final void mo12859V(SVG.C1878y0 y0Var, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            int i2 = C1884a.f9310b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()];
            if (i2 == 1) {
                y0Var.f9267o = m12903p0(trim);
            } else if (i2 == 2) {
                y0Var.f9268p = m12903p0(trim);
            } else if (i2 == 19) {
                y0Var.f9269q = m12903p0(trim);
            } else if (i2 == 20) {
                y0Var.f9270r = m12903p0(trim);
            }
        }
    }

    /* renamed from: V0 */
    public final void mo12860V0(Attributes attributes) throws SVGParseException {
        mo12883l("<solidColor>", new Object[0]);
        if (this.f9279b != null) {
            SVG.C1830b0 b0Var = new SVG.C1830b0();
            b0Var.f9210a = this.f9278a;
            b0Var.f9211b = this.f9279b;
            mo12832D(b0Var, attributes);
            mo12854S(b0Var, attributes);
            this.f9279b.mo12773i(b0Var);
            this.f9279b = b0Var;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: W */
    public final void mo12861W(SVG.C1853m mVar, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            if (SVGAttr.fromString(attributes.getLocalName(i)) == SVGAttr.transform) {
                mVar.mo12786l(mo12839J0(attributes.getValue(i)));
            }
        }
    }

    /* renamed from: W0 */
    public final void mo12862W0() {
        this.f9278a = new SVG();
    }

    /* renamed from: X */
    public final void mo12863X(SVG.C1831b1 b1Var, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            int i2 = C1884a.f9310b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()];
            if (i2 == 1) {
                b1Var.f9156q = m12902o0(trim);
            } else if (i2 == 2) {
                b1Var.f9157r = m12902o0(trim);
            } else if (i2 == 3) {
                SVG.C1857o o0 = m12902o0(trim);
                b1Var.f9158s = o0;
                if (o0.mo12793i()) {
                    throw new SVGParseException("Invalid <use> element. width cannot be negative");
                }
            } else if (i2 == 4) {
                SVG.C1857o o02 = m12902o0(trim);
                b1Var.f9159t = o02;
                if (o02.mo12793i()) {
                    throw new SVGParseException("Invalid <use> element. height cannot be negative");
                }
            } else if (i2 == 6 && ("".equals(attributes.getURI(i)) || "http://www.w3.org/1999/xlink".equals(attributes.getURI(i)))) {
                b1Var.f9155p = trim;
            }
        }
    }

    /* renamed from: X0 */
    public final void mo12864X0(String str, String str2, String str3, Attributes attributes) throws SVGParseException {
        if (this.f9280c) {
            this.f9281d++;
        } else if ("http://www.w3.org/2000/svg".equals(str) || "".equals(str)) {
            if (str2.length() <= 0) {
                str2 = str3;
            }
            SVGElem fromString = SVGElem.fromString(str2);
            switch (C1884a.f9309a[fromString.ordinal()]) {
                case 1:
                    mo12869a1(attributes);
                    return;
                case 2:
                case 3:
                    mo12889q(attributes);
                    return;
                case 4:
                    mo12884m(attributes);
                    return;
                case 5:
                    mo12879i1(attributes);
                    return;
                case 6:
                    mo12847O0(attributes);
                    return;
                case 7:
                    mo12858U0(attributes);
                    return;
                case 8:
                    mo12878i(attributes);
                    return;
                case 9:
                    mo12885n(attributes);
                    return;
                case 10:
                    mo12892v(attributes);
                    return;
                case 11:
                    mo12853R0(attributes);
                    return;
                case 12:
                    mo12851Q0(attributes);
                    return;
                case 13:
                    mo12872d1(attributes);
                    return;
                case 14:
                    mo12877h1(attributes);
                    return;
                case 15:
                    mo12875g1(attributes);
                    return;
                case 16:
                    mo12882k1(attributes);
                    return;
                case 17:
                    mo12870b1(attributes);
                    return;
                case 18:
                    mo12894x(attributes);
                    return;
                case 19:
                    mo12893w(attributes);
                    return;
                case 20:
                    mo12856T0(attributes);
                    return;
                case 21:
                    mo12866Y0(attributes);
                    return;
                case 22:
                case 23:
                    this.f9282e = true;
                    this.f9283f = fromString;
                    return;
                case 24:
                    mo12881k(attributes);
                    return;
                case 25:
                    mo12874f1(attributes);
                    return;
                case 26:
                    mo12849P0(attributes);
                    return;
                case 27:
                    mo12891u(attributes);
                    return;
                case 28:
                    mo12880j1(attributes);
                    return;
                case 29:
                    mo12896y(attributes);
                    return;
                case 30:
                    mo12868Z0(attributes);
                    return;
                case 31:
                    mo12860V0(attributes);
                    return;
                default:
                    this.f9280c = true;
                    this.f9281d = 1;
                    return;
            }
        }
    }

    /* renamed from: Y */
    public final void mo12865Y(SVG.C1860p0 p0Var, Attributes attributes) throws SVGParseException {
        for (int i = 0; i < attributes.getLength(); i++) {
            String trim = attributes.getValue(i).trim();
            int i2 = C1884a.f9310b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()];
            if (i2 == 7) {
                m12912w0(p0Var, trim);
            } else if (i2 == 87) {
                p0Var.f9230p = m12879N0(trim);
            }
        }
    }

    /* renamed from: Y0 */
    public final void mo12866Y0(Attributes attributes) throws SVGParseException {
        mo12883l("<stop>", new Object[0]);
        SVG.C1844h0 h0Var = this.f9279b;
        if (h0Var == null) {
            throw new SVGParseException("Invalid document. Root element must be <svg>");
        } else if (h0Var instanceof SVG.C1847j) {
            SVG.C1833c0 c0Var = new SVG.C1833c0();
            c0Var.f9210a = this.f9278a;
            c0Var.f9211b = this.f9279b;
            mo12832D(c0Var, attributes);
            mo12854S(c0Var, attributes);
            mo12852R(c0Var, attributes);
            this.f9279b.mo12773i(c0Var);
            this.f9279b = c0Var;
        } else {
            throw new SVGParseException("Invalid document. <stop> elements are only valid inside <linearGradient> or <radialGradient> elements.");
        }
    }

    /* renamed from: Z */
    public final void mo12867Z(String str) {
        this.f9278a.mo12746a(new CSSParser(CSSParser.MediaType.screen, CSSParser.Source.Document).mo12693d(str));
    }

    /* renamed from: Z0 */
    public final void mo12868Z0(Attributes attributes) throws SVGParseException {
        mo12883l("<style>", new Object[0]);
        if (this.f9279b != null) {
            String str = "all";
            boolean z = true;
            for (int i = 0; i < attributes.getLength(); i++) {
                String trim = attributes.getValue(i).trim();
                int i2 = C1884a.f9310b[SVGAttr.fromString(attributes.getLocalName(i)).ordinal()];
                if (i2 == 88) {
                    z = trim.equals("text/css");
                } else if (i2 == 89) {
                    str = trim;
                }
            }
            if (!z || !CSSParser.m12669b(str, CSSParser.MediaType.screen)) {
                this.f9280c = true;
                this.f9281d = 1;
                return;
            }
            this.f9285h = true;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: a1 */
    public final void mo12869a1(Attributes attributes) throws SVGParseException {
        mo12883l("<svg>", new Object[0]);
        SVG.C1836d0 d0Var = new SVG.C1836d0();
        d0Var.f9210a = this.f9278a;
        d0Var.f9211b = this.f9279b;
        mo12832D(d0Var, attributes);
        mo12854S(d0Var, attributes);
        mo12831C(d0Var, attributes);
        mo12865Y(d0Var, attributes);
        mo12850Q(d0Var, attributes);
        SVG.C1844h0 h0Var = this.f9279b;
        if (h0Var == null) {
            this.f9278a.mo12761u(d0Var);
        } else {
            h0Var.mo12773i(d0Var);
        }
        this.f9279b = d0Var;
    }

    /* renamed from: b1 */
    public final void mo12870b1(Attributes attributes) throws SVGParseException {
        mo12883l("<symbol>", new Object[0]);
        if (this.f9279b != null) {
            SVG.C1864r0 r0Var = new SVG.C1864r0();
            r0Var.f9210a = this.f9278a;
            r0Var.f9211b = this.f9279b;
            mo12832D(r0Var, attributes);
            mo12854S(r0Var, attributes);
            mo12831C(r0Var, attributes);
            mo12865Y(r0Var, attributes);
            this.f9279b.mo12773i(r0Var);
            this.f9279b = r0Var;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: c1 */
    public final void mo12871c1(String str) throws SVGParseException {
        if (!this.f9280c) {
            if (this.f9282e) {
                if (this.f9284g == null) {
                    this.f9284g = new StringBuilder(str.length());
                }
                this.f9284g.append(str);
            } else if (this.f9285h) {
                if (this.f9286i == null) {
                    this.f9286i = new StringBuilder(str.length());
                }
                this.f9286i.append(str);
            } else if (this.f9279b instanceof SVG.C1874w0) {
                mo12876h(str);
            }
        }
    }

    /* renamed from: d1 */
    public final void mo12872d1(Attributes attributes) throws SVGParseException {
        mo12883l("<text>", new Object[0]);
        if (this.f9279b != null) {
            SVG.C1870u0 u0Var = new SVG.C1870u0();
            u0Var.f9210a = this.f9278a;
            u0Var.f9211b = this.f9279b;
            mo12832D(u0Var, attributes);
            mo12854S(u0Var, attributes);
            mo12861W(u0Var, attributes);
            mo12831C(u0Var, attributes);
            mo12859V(u0Var, attributes);
            this.f9279b.mo12773i(u0Var);
            this.f9279b = u0Var;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: e1 */
    public final void mo12873e1(char[] cArr, int i, int i2) throws SVGParseException {
        if (!this.f9280c) {
            if (this.f9282e) {
                if (this.f9284g == null) {
                    this.f9284g = new StringBuilder(i2);
                }
                this.f9284g.append(cArr, i, i2);
            } else if (this.f9285h) {
                if (this.f9286i == null) {
                    this.f9286i = new StringBuilder(i2);
                }
                this.f9286i.append(cArr, i, i2);
            } else if (this.f9279b instanceof SVG.C1874w0) {
                mo12876h(new String(cArr, i, i2));
            }
        }
    }

    /* renamed from: f1 */
    public final void mo12874f1(Attributes attributes) throws SVGParseException {
        mo12883l("<textPath>", new Object[0]);
        if (this.f9279b != null) {
            SVG.C1876x0 x0Var = new SVG.C1876x0();
            x0Var.f9210a = this.f9278a;
            x0Var.f9211b = this.f9279b;
            mo12832D(x0Var, attributes);
            mo12854S(x0Var, attributes);
            mo12831C(x0Var, attributes);
            mo12857U(x0Var, attributes);
            this.f9279b.mo12773i(x0Var);
            this.f9279b = x0Var;
            SVG.C1844h0 h0Var = x0Var.f9211b;
            if (h0Var instanceof SVG.C1880z0) {
                x0Var.mo12809p((SVG.C1880z0) h0Var);
            } else {
                x0Var.mo12809p(((SVG.C1872v0) h0Var).mo12766e());
            }
        } else {
            throw new SVGParseException("Invalid document. Root element must be <svg>");
        }
    }

    /* renamed from: g1 */
    public final void mo12875g1(Attributes attributes) throws SVGParseException {
        mo12883l("<tref>", new Object[0]);
        SVG.C1844h0 h0Var = this.f9279b;
        if (h0Var == null) {
            throw new SVGParseException("Invalid document. Root element must be <svg>");
        } else if (h0Var instanceof SVG.C1874w0) {
            SVG.C1866s0 s0Var = new SVG.C1866s0();
            s0Var.f9210a = this.f9278a;
            s0Var.f9211b = this.f9279b;
            mo12832D(s0Var, attributes);
            mo12854S(s0Var, attributes);
            mo12831C(s0Var, attributes);
            mo12855T(s0Var, attributes);
            this.f9279b.mo12773i(s0Var);
            SVG.C1844h0 h0Var2 = s0Var.f9211b;
            if (h0Var2 instanceof SVG.C1880z0) {
                s0Var.mo12796p((SVG.C1880z0) h0Var2);
            } else {
                s0Var.mo12796p(((SVG.C1872v0) h0Var2).mo12766e());
            }
        } else {
            throw new SVGParseException("Invalid document. <tref> elements are only valid inside <text> or <tspan> elements.");
        }
    }

    /* renamed from: h */
    public final void mo12876h(String str) throws SVGParseException {
        SVG.C1852l0 l0Var;
        SVG.C1840f0 f0Var = (SVG.C1840f0) this.f9279b;
        int size = f0Var.f9177i.size();
        if (size == 0) {
            l0Var = null;
        } else {
            l0Var = f0Var.f9177i.get(size - 1);
        }
        if (l0Var instanceof SVG.C1828a1) {
            StringBuilder sb = new StringBuilder();
            SVG.C1828a1 a1Var = (SVG.C1828a1) l0Var;
            sb.append(a1Var.f9149c);
            sb.append(str);
            a1Var.f9149c = sb.toString();
            return;
        }
        this.f9279b.mo12773i(new SVG.C1828a1(str));
    }

    /* renamed from: h1 */
    public final void mo12877h1(Attributes attributes) throws SVGParseException {
        mo12883l("<tspan>", new Object[0]);
        SVG.C1844h0 h0Var = this.f9279b;
        if (h0Var == null) {
            throw new SVGParseException("Invalid document. Root element must be <svg>");
        } else if (h0Var instanceof SVG.C1874w0) {
            SVG.C1868t0 t0Var = new SVG.C1868t0();
            t0Var.f9210a = this.f9278a;
            t0Var.f9211b = this.f9279b;
            mo12832D(t0Var, attributes);
            mo12854S(t0Var, attributes);
            mo12831C(t0Var, attributes);
            mo12859V(t0Var, attributes);
            this.f9279b.mo12773i(t0Var);
            this.f9279b = t0Var;
            SVG.C1844h0 h0Var2 = t0Var.f9211b;
            if (h0Var2 instanceof SVG.C1880z0) {
                t0Var.mo12798p((SVG.C1880z0) h0Var2);
            } else {
                t0Var.mo12798p(((SVG.C1872v0) h0Var2).mo12766e());
            }
        } else {
            throw new SVGParseException("Invalid document. <tspan> elements are only valid inside <text> or other <tspan> elements.");
        }
    }

    /* renamed from: i */
    public final void mo12878i(Attributes attributes) throws SVGParseException {
        mo12883l("<circle>", new Object[0]);
        if (this.f9279b != null) {
            SVG.C1835d dVar = new SVG.C1835d();
            dVar.f9210a = this.f9278a;
            dVar.f9211b = this.f9279b;
            mo12832D(dVar, attributes);
            mo12854S(dVar, attributes);
            mo12861W(dVar, attributes);
            mo12831C(dVar, attributes);
            mo12829A(dVar, attributes);
            this.f9279b.mo12773i(dVar);
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: i1 */
    public final void mo12879i1(Attributes attributes) throws SVGParseException {
        mo12883l("<use>", new Object[0]);
        if (this.f9279b != null) {
            SVG.C1831b1 b1Var = new SVG.C1831b1();
            b1Var.f9210a = this.f9278a;
            b1Var.f9211b = this.f9279b;
            mo12832D(b1Var, attributes);
            mo12854S(b1Var, attributes);
            mo12861W(b1Var, attributes);
            mo12831C(b1Var, attributes);
            mo12863X(b1Var, attributes);
            this.f9279b.mo12773i(b1Var);
            this.f9279b = b1Var;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: j1 */
    public final void mo12880j1(Attributes attributes) throws SVGParseException {
        mo12883l("<view>", new Object[0]);
        if (this.f9279b != null) {
            SVG.C1834c1 c1Var = new SVG.C1834c1();
            c1Var.f9210a = this.f9278a;
            c1Var.f9211b = this.f9279b;
            mo12832D(c1Var, attributes);
            mo12831C(c1Var, attributes);
            mo12865Y(c1Var, attributes);
            this.f9279b.mo12773i(c1Var);
            this.f9279b = c1Var;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: k */
    public final void mo12881k(Attributes attributes) throws SVGParseException {
        mo12883l("<clipPath>", new Object[0]);
        if (this.f9279b != null) {
            SVG.C1837e eVar = new SVG.C1837e();
            eVar.f9210a = this.f9278a;
            eVar.f9211b = this.f9279b;
            mo12832D(eVar, attributes);
            mo12854S(eVar, attributes);
            mo12861W(eVar, attributes);
            mo12831C(eVar, attributes);
            mo12830B(eVar, attributes);
            this.f9279b.mo12773i(eVar);
            this.f9279b = eVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: k1 */
    public final void mo12882k1(Attributes attributes) throws SVGParseException {
        mo12883l("<switch>", new Object[0]);
        if (this.f9279b != null) {
            SVG.C1862q0 q0Var = new SVG.C1862q0();
            q0Var.f9210a = this.f9278a;
            q0Var.f9211b = this.f9279b;
            mo12832D(q0Var, attributes);
            mo12854S(q0Var, attributes);
            mo12861W(q0Var, attributes);
            mo12831C(q0Var, attributes);
            this.f9279b.mo12773i(q0Var);
            this.f9279b = q0Var;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: l */
    public final void mo12883l(String str, Object... objArr) {
    }

    /* renamed from: m */
    public final void mo12884m(Attributes attributes) throws SVGParseException {
        mo12883l("<defs>", new Object[0]);
        if (this.f9279b != null) {
            SVG.C1843h hVar = new SVG.C1843h();
            hVar.f9210a = this.f9278a;
            hVar.f9211b = this.f9279b;
            mo12832D(hVar, attributes);
            mo12854S(hVar, attributes);
            mo12861W(hVar, attributes);
            this.f9279b.mo12773i(hVar);
            this.f9279b = hVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: n */
    public final void mo12885n(Attributes attributes) throws SVGParseException {
        mo12883l("<ellipse>", new Object[0]);
        if (this.f9279b != null) {
            SVG.C1845i iVar = new SVG.C1845i();
            iVar.f9210a = this.f9278a;
            iVar.f9211b = this.f9279b;
            mo12832D(iVar, attributes);
            mo12854S(iVar, attributes);
            mo12861W(iVar, attributes);
            mo12831C(iVar, attributes);
            mo12833E(iVar, attributes);
            this.f9279b.mo12773i(iVar);
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: n0 */
    public final Float mo12886n0(String str) throws SVGParseException {
        if (str.length() != 0) {
            int length = str.length();
            boolean z = true;
            if (str.charAt(str.length() - 1) == '%') {
                length--;
            } else {
                z = false;
            }
            try {
                float g0 = m12894g0(str, 0, length);
                float f = 100.0f;
                if (z) {
                    g0 /= 100.0f;
                }
                if (g0 < Utils.FLOAT_EPSILON) {
                    f = 0.0f;
                } else if (g0 <= 100.0f) {
                    f = g0;
                }
                return Float.valueOf(f);
            } catch (NumberFormatException e) {
                throw new SVGParseException("Invalid offset value in <stop>: " + str, e);
            }
        } else {
            throw new SVGParseException("Invalid offset value in <stop> (empty string)");
        }
    }

    /* renamed from: o */
    public final void mo12887o() {
    }

    /* renamed from: p */
    public final void mo12888p(String str, String str2, String str3) throws SVGParseException {
        if (this.f9280c) {
            int i = this.f9281d - 1;
            this.f9281d = i;
            if (i == 0) {
                this.f9280c = false;
                return;
            }
        }
        if ("http://www.w3.org/2000/svg".equals(str) || "".equals(str)) {
            if (str2.length() <= 0) {
                str2 = str3;
            }
            int i2 = C1884a.f9309a[SVGElem.fromString(str2).ordinal()];
            if (!(i2 == 1 || i2 == 2 || i2 == 4 || i2 == 5 || i2 == 13 || i2 == 14)) {
                switch (i2) {
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                    case 20:
                    case 21:
                    case 24:
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 31:
                        break;
                    case 22:
                    case 23:
                        this.f9282e = false;
                        StringBuilder sb = this.f9284g;
                        if (sb != null) {
                            SVGElem sVGElem = this.f9283f;
                            if (sVGElem == SVGElem.title) {
                                this.f9278a.mo12762v(sb.toString());
                            } else if (sVGElem == SVGElem.desc) {
                                this.f9278a.mo12758r(sb.toString());
                            }
                            this.f9284g.setLength(0);
                            return;
                        }
                        return;
                    case 30:
                        StringBuilder sb2 = this.f9286i;
                        if (sb2 != null) {
                            this.f9285h = false;
                            mo12867Z(sb2.toString());
                            this.f9286i.setLength(0);
                            return;
                        }
                        return;
                    default:
                        return;
                }
            }
            this.f9279b = ((SVG.C1852l0) this.f9279b).f9211b;
        }
    }

    /* renamed from: q */
    public final void mo12889q(Attributes attributes) throws SVGParseException {
        mo12883l("<g>", new Object[0]);
        if (this.f9279b != null) {
            SVG.C1851l lVar = new SVG.C1851l();
            lVar.f9210a = this.f9278a;
            lVar.f9211b = this.f9279b;
            mo12832D(lVar, attributes);
            mo12854S(lVar, attributes);
            mo12861W(lVar, attributes);
            mo12831C(lVar, attributes);
            this.f9279b.mo12773i(lVar);
            this.f9279b = lVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: r */
    public final void mo12890r(String str, Map<String, String> map) {
        if (str.equals("xml-stylesheet")) {
            SVG.m12725g();
        }
    }

    /* renamed from: u */
    public final void mo12891u(Attributes attributes) throws SVGParseException {
        mo12883l("<image>", new Object[0]);
        if (this.f9279b != null) {
            SVG.C1855n nVar = new SVG.C1855n();
            nVar.f9210a = this.f9278a;
            nVar.f9211b = this.f9279b;
            mo12832D(nVar, attributes);
            mo12854S(nVar, attributes);
            mo12861W(nVar, attributes);
            mo12831C(nVar, attributes);
            mo12835G(nVar, attributes);
            this.f9279b.mo12773i(nVar);
            this.f9279b = nVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: v */
    public final void mo12892v(Attributes attributes) throws SVGParseException {
        mo12883l("<line>", new Object[0]);
        if (this.f9279b != null) {
            SVG.C1859p pVar = new SVG.C1859p();
            pVar.f9210a = this.f9278a;
            pVar.f9211b = this.f9279b;
            mo12832D(pVar, attributes);
            mo12854S(pVar, attributes);
            mo12861W(pVar, attributes);
            mo12831C(pVar, attributes);
            mo12836H(pVar, attributes);
            this.f9279b.mo12773i(pVar);
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: w */
    public final void mo12893w(Attributes attributes) throws SVGParseException {
        mo12883l("<linearGradient>", new Object[0]);
        if (this.f9279b != null) {
            SVG.C1850k0 k0Var = new SVG.C1850k0();
            k0Var.f9210a = this.f9278a;
            k0Var.f9211b = this.f9279b;
            mo12832D(k0Var, attributes);
            mo12854S(k0Var, attributes);
            mo12834F(k0Var, attributes);
            mo12837I(k0Var, attributes);
            this.f9279b.mo12773i(k0Var);
            this.f9279b = k0Var;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: x */
    public final void mo12894x(Attributes attributes) throws SVGParseException {
        mo12883l("<marker>", new Object[0]);
        if (this.f9279b != null) {
            SVG.C1861q qVar = new SVG.C1861q();
            qVar.f9210a = this.f9278a;
            qVar.f9211b = this.f9279b;
            mo12832D(qVar, attributes);
            mo12854S(qVar, attributes);
            mo12831C(qVar, attributes);
            mo12865Y(qVar, attributes);
            mo12838J(qVar, attributes);
            this.f9279b.mo12773i(qVar);
            this.f9279b = qVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: x0 */
    public final Map<String, String> mo12895x0(C1890g gVar) {
        HashMap hashMap = new HashMap();
        gVar.mo12904A();
        String s = gVar.mo12923s('=');
        while (s != null) {
            gVar.mo12910f('=');
            hashMap.put(s, gVar.mo12921q());
            gVar.mo12904A();
            s = gVar.mo12923s('=');
        }
        return hashMap;
    }

    /* renamed from: y */
    public final void mo12896y(Attributes attributes) throws SVGParseException {
        mo12883l("<mask>", new Object[0]);
        if (this.f9279b != null) {
            SVG.C1863r rVar = new SVG.C1863r();
            rVar.f9210a = this.f9278a;
            rVar.f9211b = this.f9279b;
            mo12832D(rVar, attributes);
            mo12854S(rVar, attributes);
            mo12831C(rVar, attributes);
            mo12840K(rVar, attributes);
            this.f9279b.mo12773i(rVar);
            this.f9279b = rVar;
            return;
        }
        throw new SVGParseException("Invalid document. Root element must be <svg>");
    }

    /* renamed from: z */
    public SVG mo12897z(BufferedInputStream bufferedInputStream, boolean z) throws SVGParseException {
        if (!bufferedInputStream.markSupported()) {
            bufferedInputStream = new BufferedInputStream(bufferedInputStream);
        }
        try {
            bufferedInputStream.mark(3);
            int read = bufferedInputStream.read() + (bufferedInputStream.read() << 8);
            bufferedInputStream.reset();
            if (read == 35615) {
                bufferedInputStream = new BufferedInputStream(new GZIPInputStream(bufferedInputStream));
            }
        } catch (IOException unused) {
        }
        try {
            bufferedInputStream.mark(4096);
            mo12843L0(bufferedInputStream, z);
            return this.f9278a;
        } finally {
            try {
                bufferedInputStream.close();
            } catch (IOException unused2) {
            }
        }
    }
}
